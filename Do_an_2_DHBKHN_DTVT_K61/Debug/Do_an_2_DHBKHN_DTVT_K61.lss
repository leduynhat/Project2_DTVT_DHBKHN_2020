
Do_an_2_DHBKHN_DTVT_K61.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ac0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000de  00800060  00000ac0  00000b54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080013e  0080013e  00000c32  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  00000c34  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016e  00000000  00000000  00001588  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  000016f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000250  00000000  00000000  00001716  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000cc4  00000000  00000000  00001966  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000337  00000000  00000000  0000262a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000e46  00000000  00000000  00002961  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000270  00000000  00000000  000037a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000439  00000000  00000000  00003a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000758  00000000  00000000  00003e51  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000038  00000000  00000000  000045a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ec       	ldi	r30, 0xC0	; 192
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 33       	cpi	r26, 0x3E	; 62
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	ae e3       	ldi	r26, 0x3E	; 62
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 33       	cpi	r26, 0x3F	; 63
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 92 04 	call	0x924	; 0x924 <main>
  8a:	0c 94 5e 05 	jmp	0xabc	; 0xabc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD4_OUT_CMD>:
	LCD4_HOME();
}

void LCD4_OUT_CMD(unsigned char lcd4_cmd)
{
	lcd4_data_PORT &= 0x0F;					// Xoa bus 4 bit ve 0
  92:	95 b3       	in	r25, 0x15	; 21
  94:	9f 70       	andi	r25, 0x0F	; 15
  96:	95 bb       	out	0x15, r25	; 21
	lcd4_control_PORT &= ~(1<<RS);
  98:	96 98       	cbi	0x12, 6	; 18
	lcd4_control_PORT |= (1<<E);
  9a:	97 9a       	sbi	0x12, 7	; 18
	lcd4_data_PORT |= (lcd4_cmd & 0xF0);	// Xuat 4 bit cao
  9c:	25 b3       	in	r18, 0x15	; 21
  9e:	98 2f       	mov	r25, r24
  a0:	90 7f       	andi	r25, 0xF0	; 240
  a2:	29 2b       	or	r18, r25
  a4:	25 bb       	out	0x15, r18	; 21
	lcd4_data_PORT |= (lcd4_cmd & 0xF0);
  a6:	25 b3       	in	r18, 0x15	; 21
  a8:	92 2b       	or	r25, r18
  aa:	95 bb       	out	0x15, r25	; 21
	lcd4_control_PORT &= ~(1<<E);
  ac:	97 98       	cbi	0x12, 7	; 18
	LCD4_DELAY(1);							// Tre mot luc. 100 us

	lcd4_data_PORT &= 0x0F;					// Xoa bus 4 bit ve 0
  ae:	95 b3       	in	r25, 0x15	; 21
  b0:	9f 70       	andi	r25, 0x0F	; 15
  b2:	95 bb       	out	0x15, r25	; 21
	lcd4_control_PORT &= ~(1<<RS);
  b4:	96 98       	cbi	0x12, 6	; 18
	lcd4_control_PORT |= (1<<E);
  b6:	97 9a       	sbi	0x12, 7	; 18
	lcd4_data_PORT |= ((lcd4_cmd << 4) & 0xF0);		// Xuat 4 bit thap
  b8:	95 b3       	in	r25, 0x15	; 21
  ba:	82 95       	swap	r24
  bc:	80 7f       	andi	r24, 0xF0	; 240
  be:	98 2b       	or	r25, r24
  c0:	95 bb       	out	0x15, r25	; 21
	lcd4_data_PORT |= ((lcd4_cmd << 4) & 0xF0);
  c2:	95 b3       	in	r25, 0x15	; 21
  c4:	89 2b       	or	r24, r25
  c6:	85 bb       	out	0x15, r24	; 21
	lcd4_control_PORT &= ~(1<<E);
  c8:	97 98       	cbi	0x12, 7	; 18
	LCD4_DELAY(2);							// Tre it nhat 160 us de hoan thanh lenh
}
  ca:	08 95       	ret

000000cc <LCD4_OUT_DATA>:

void LCD4_OUT_DATA(unsigned char lcd4_data)
{
	lcd4_data_PORT &= 0x0F;					// Xoa bus 4 bit ve 0
  cc:	95 b3       	in	r25, 0x15	; 21
  ce:	9f 70       	andi	r25, 0x0F	; 15
  d0:	95 bb       	out	0x15, r25	; 21
	lcd4_control_PORT |= (1<<RS);
  d2:	96 9a       	sbi	0x12, 6	; 18
	lcd4_control_PORT |= (1<<E);
  d4:	97 9a       	sbi	0x12, 7	; 18
	lcd4_data_PORT |= (lcd4_data & 0xF0);	// Xuat 4 bit cao
  d6:	25 b3       	in	r18, 0x15	; 21
  d8:	98 2f       	mov	r25, r24
  da:	90 7f       	andi	r25, 0xF0	; 240
  dc:	29 2b       	or	r18, r25
  de:	25 bb       	out	0x15, r18	; 21
	lcd4_data_PORT |= (lcd4_data & 0xF0);
  e0:	25 b3       	in	r18, 0x15	; 21
  e2:	92 2b       	or	r25, r18
  e4:	95 bb       	out	0x15, r25	; 21
	lcd4_control_PORT &= ~(1<<E);
  e6:	97 98       	cbi	0x12, 7	; 18
	LCD4_DELAY(1);							// Tre mot luc
	
	lcd4_data_PORT &= 0x0F;					// Xoa bus 4 bit ve 0
  e8:	95 b3       	in	r25, 0x15	; 21
  ea:	9f 70       	andi	r25, 0x0F	; 15
  ec:	95 bb       	out	0x15, r25	; 21
	lcd4_control_PORT |= (1<<RS);
  ee:	96 9a       	sbi	0x12, 6	; 18
	lcd4_control_PORT |= (1<<E);
  f0:	97 9a       	sbi	0x12, 7	; 18
	lcd4_data_PORT |= ((lcd4_data << 4) & 0xF0);	// Xuat 4 bit thap
  f2:	95 b3       	in	r25, 0x15	; 21
  f4:	82 95       	swap	r24
  f6:	80 7f       	andi	r24, 0xF0	; 240
  f8:	98 2b       	or	r25, r24
  fa:	95 bb       	out	0x15, r25	; 21
	lcd4_data_PORT |= ((lcd4_data << 4) & 0xF0);
  fc:	95 b3       	in	r25, 0x15	; 21
  fe:	89 2b       	or	r24, r25
 100:	85 bb       	out	0x15, r24	; 21
	lcd4_control_PORT &= ~(1<<E);
 102:	97 98       	cbi	0x12, 7	; 18
	LCD4_DELAY(2);							// Tre it nhat 160 us de hoan thanh lenh
}
 104:	08 95       	ret

00000106 <LCD4_CLR>:

void LCD4_CLR()
{
	LCD4_OUT_CMD(0x01);
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	0e 94 49 00 	call	0x92	; 0x92 <LCD4_OUT_CMD>
	LCD4_DELAY(41);							// Tre it nhat 4.1 ms de hoan thanh lenh
}
 10c:	08 95       	ret

0000010e <LCD4_HOME>:

void LCD4_HOME()
{
	LCD4_OUT_CMD(0x02);
 10e:	82 e0       	ldi	r24, 0x02	; 2
 110:	0e 94 49 00 	call	0x92	; 0x92 <LCD4_OUT_CMD>
	LCD4_DELAY(41);							// Tre it nhat 4.1 ms de hoan thanh lenh
}
 114:	08 95       	ret

00000116 <LCD4_INIT>:
void LCD4_DELAY(unsigned int lcd4_n);

// -----------------------------------------------------------------------------------

void LCD4_INIT(unsigned char lcd4_cur_underline, unsigned char lcd4_cur_blink)
{
 116:	1f 93       	push	r17
	unsigned char lcd4_cur_mode = 0x0C;
	unsigned char lcd4_i;
	
	// Xac dinh dang con tro

	if(lcd4_cur_underline) lcd4_cur_mode |= (1<<1);
 118:	88 23       	and	r24, r24
 11a:	11 f4       	brne	.+4      	; 0x120 <LCD4_INIT+0xa>

// -----------------------------------------------------------------------------------

void LCD4_INIT(unsigned char lcd4_cur_underline, unsigned char lcd4_cur_blink)
{
	unsigned char lcd4_cur_mode = 0x0C;
 11c:	1c e0       	ldi	r17, 0x0C	; 12
 11e:	01 c0       	rjmp	.+2      	; 0x122 <LCD4_INIT+0xc>
	unsigned char lcd4_i;
	
	// Xac dinh dang con tro

	if(lcd4_cur_underline) lcd4_cur_mode |= (1<<1);
 120:	1e e0       	ldi	r17, 0x0E	; 14
	if(lcd4_cur_blink) lcd4_cur_mode |= (1<<0);
 122:	61 11       	cpse	r22, r1
 124:	11 60       	ori	r17, 0x01	; 1

	LCD4_DELAY(400);						// Cho it nhat 40 ms cho LCD on dinh

	// Cau hinh cac chan du lieu la dau ra

	lcd4_control_DDR |= (1<<E);
 126:	8f 9a       	sbi	0x11, 7	; 17
	lcd4_control_DDR |= (1<<RS);
 128:	8e 9a       	sbi	0x11, 6	; 17

	lcd4_data_DDR |= 0xF0;
 12a:	84 b3       	in	r24, 0x14	; 20
 12c:	80 6f       	ori	r24, 0xF0	; 240
 12e:	84 bb       	out	0x14, r24	; 20
	lcd4_data_PORT &= 0x0F;					// Xoa bus 4 bit ve 0
 130:	85 b3       	in	r24, 0x15	; 21
 132:	8f 70       	andi	r24, 0x0F	; 15
 134:	85 bb       	out	0x15, r24	; 21

	// Gui lien tiep 3 lenh 0x30 de khoi tao

	for(lcd4_i=0;lcd4_i<3;lcd4_i++)
 136:	80 e0       	ldi	r24, 0x00	; 0
	{
		lcd4_control_PORT &= ~(1<<RS);
 138:	96 98       	cbi	0x12, 6	; 18
		lcd4_control_PORT |= (1<<E);
 13a:	97 9a       	sbi	0x12, 7	; 18
		lcd4_data_PORT |= 0x30;
 13c:	95 b3       	in	r25, 0x15	; 21
 13e:	90 63       	ori	r25, 0x30	; 48
 140:	95 bb       	out	0x15, r25	; 21
		lcd4_data_PORT |= 0x30;				// Xuat du lieu hai lan
 142:	95 b3       	in	r25, 0x15	; 21
 144:	90 63       	ori	r25, 0x30	; 48
 146:	95 bb       	out	0x15, r25	; 21
		lcd4_control_PORT &= ~(1<<E);	
 148:	97 98       	cbi	0x12, 7	; 18
	lcd4_data_DDR |= 0xF0;
	lcd4_data_PORT &= 0x0F;					// Xoa bus 4 bit ve 0

	// Gui lien tiep 3 lenh 0x30 de khoi tao

	for(lcd4_i=0;lcd4_i<3;lcd4_i++)
 14a:	8f 5f       	subi	r24, 0xFF	; 255
 14c:	83 30       	cpi	r24, 0x03	; 3
 14e:	a1 f7       	brne	.-24     	; 0x138 <LCD4_INIT+0x22>
		lcd4_data_PORT |= 0x30;				// Xuat du lieu hai lan
		lcd4_control_PORT &= ~(1<<E);	
		LCD4_DELAY(2);						// Tre it nhat 160 us de hoan thanh lenh
	}

	lcd4_data_PORT &= 0x0F;					// Xoa bus 4 bit ve 0
 150:	85 b3       	in	r24, 0x15	; 21
 152:	8f 70       	andi	r24, 0x0F	; 15
 154:	85 bb       	out	0x15, r24	; 21
	lcd4_control_PORT &= ~(1<<RS);
 156:	96 98       	cbi	0x12, 6	; 18
	lcd4_control_PORT |= (1<<E);
 158:	97 9a       	sbi	0x12, 7	; 18
	lcd4_data_PORT |= 0x20;					// Xac dinh bus 4 bit
 15a:	ad 9a       	sbi	0x15, 5	; 21
	lcd4_data_PORT |= 0x20;
 15c:	ad 9a       	sbi	0x15, 5	; 21
	lcd4_control_PORT &= ~(1<<E);
 15e:	97 98       	cbi	0x12, 7	; 18
	LCD4_DELAY(41);
						
	LCD4_OUT_DATA(0x28);					// Hai dong, ma tran 5x7, bus 4 bit.
 160:	88 e2       	ldi	r24, 0x28	; 40
 162:	0e 94 66 00 	call	0xcc	; 0xcc <LCD4_OUT_DATA>
	LCD4_DELAY(41);							// Tre it nhat 4.1 ms de hoan thanh lenh

	LCD4_OUT_CMD(lcd4_cur_mode);			// Bat hien thi, va khoi tao con tro.
 166:	81 2f       	mov	r24, r17
 168:	0e 94 49 00 	call	0x92	; 0x92 <LCD4_OUT_CMD>
	LCD4_DELAY(41);							// Tre mot luc

	LCD4_CLR();
 16c:	0e 94 83 00 	call	0x106	; 0x106 <LCD4_CLR>
	LCD4_HOME();
 170:	0e 94 87 00 	call	0x10e	; 0x10e <LCD4_HOME>
}
 174:	1f 91       	pop	r17
 176:	08 95       	ret

00000178 <LCD4_CUR_GOTO>:
	LCD4_DELAY(41);							// Tre it nhat 4.1 ms de hoan thanh lenh
}

void LCD4_CUR_GOTO(unsigned char lcd4_row, unsigned char lcd4_col)
{
	if(lcd4_row == 2)
 178:	82 30       	cpi	r24, 0x02	; 2
 17a:	29 f4       	brne	.+10     	; 0x186 <LCD4_CUR_GOTO+0xe>
		LCD4_OUT_CMD(0xC0 + lcd4_col);
 17c:	86 2f       	mov	r24, r22
 17e:	80 54       	subi	r24, 0x40	; 64
 180:	0e 94 49 00 	call	0x92	; 0x92 <LCD4_OUT_CMD>
 184:	08 95       	ret
	else
		LCD4_OUT_CMD(0x80 + lcd4_col);
 186:	86 2f       	mov	r24, r22
 188:	80 58       	subi	r24, 0x80	; 128
 18a:	0e 94 49 00 	call	0x92	; 0x92 <LCD4_OUT_CMD>
 18e:	08 95       	ret

00000190 <LCD4_OUT_STR>:
}

void LCD4_OUT_STR(char *lcd4_str)
{
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
 194:	ec 01       	movw	r28, r24
	while(*lcd4_str)
 196:	88 81       	ld	r24, Y
 198:	88 23       	and	r24, r24
 19a:	31 f0       	breq	.+12     	; 0x1a8 <LCD4_OUT_STR+0x18>
		LCD4_OUT_CMD(0xC0 + lcd4_col);
	else
		LCD4_OUT_CMD(0x80 + lcd4_col);
}

void LCD4_OUT_STR(char *lcd4_str)
 19c:	21 96       	adiw	r28, 0x01	; 1
{
	while(*lcd4_str)
	{
		LCD4_OUT_DATA(*lcd4_str);
 19e:	0e 94 66 00 	call	0xcc	; 0xcc <LCD4_OUT_DATA>
		LCD4_OUT_CMD(0x80 + lcd4_col);
}

void LCD4_OUT_STR(char *lcd4_str)
{
	while(*lcd4_str)
 1a2:	89 91       	ld	r24, Y+
 1a4:	88 23       	and	r24, r24
 1a6:	d9 f7       	brne	.-10     	; 0x19e <LCD4_OUT_STR+0xe>
	{
		LCD4_OUT_DATA(*lcd4_str);
		lcd4_str++;
	}
}
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <LCD4_OUT_DEC>:

void LCD4_OUT_DEC(unsigned long int lcd4_n, unsigned char lcd4_length)
{
 1ae:	6f 92       	push	r6
 1b0:	7f 92       	push	r7
 1b2:	8f 92       	push	r8
 1b4:	9f 92       	push	r9
 1b6:	af 92       	push	r10
 1b8:	bf 92       	push	r11
 1ba:	cf 92       	push	r12
 1bc:	df 92       	push	r13
 1be:	ef 92       	push	r14
 1c0:	ff 92       	push	r15
 1c2:	0f 93       	push	r16
 1c4:	1f 93       	push	r17
 1c6:	df 93       	push	r29
 1c8:	cf 93       	push	r28
 1ca:	cd b7       	in	r28, 0x3d	; 61
 1cc:	de b7       	in	r29, 0x3e	; 62
 1ce:	e4 2e       	mov	r14, r20
	}
	for(i=lcd4_length;i>0;i--)
	{
		LCD4_OUT_DATA(lcd4_temp[i-1]);
	}
}
 1d0:	6d b6       	in	r6, 0x3d	; 61
 1d2:	7e b6       	in	r7, 0x3e	; 62
	}
}

void LCD4_OUT_DEC(unsigned long int lcd4_n, unsigned char lcd4_length)
{
	unsigned char lcd4_temp[lcd4_length];
 1d4:	2d b7       	in	r18, 0x3d	; 61
 1d6:	3e b7       	in	r19, 0x3e	; 62
 1d8:	24 1b       	sub	r18, r20
 1da:	31 09       	sbc	r19, r1
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	f8 94       	cli
 1e0:	3e bf       	out	0x3e, r19	; 62
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	2d bf       	out	0x3d, r18	; 61
 1e6:	0d b7       	in	r16, 0x3d	; 61
 1e8:	1e b7       	in	r17, 0x3e	; 62
 1ea:	0f 5f       	subi	r16, 0xFF	; 255
 1ec:	1f 4f       	sbci	r17, 0xFF	; 255
 1ee:	48 01       	movw	r8, r16
	unsigned char i;
	for(i=0;i<lcd4_length;i++)
 1f0:	44 23       	and	r20, r20
 1f2:	19 f1       	breq	.+70     	; 0x23a <LCD4_OUT_DEC+0x8c>
 1f4:	ff 24       	eor	r15, r15
	{
		lcd4_temp[i] = (lcd4_n % 10) + 0x30;
 1f6:	0f 2e       	mov	r0, r31
 1f8:	fa e0       	ldi	r31, 0x0A	; 10
 1fa:	af 2e       	mov	r10, r31
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	bf 2e       	mov	r11, r31
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	cf 2e       	mov	r12, r31
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	df 2e       	mov	r13, r31
 208:	f0 2d       	mov	r31, r0
 20a:	a6 01       	movw	r20, r12
 20c:	95 01       	movw	r18, r10
 20e:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__udivmodsi4>
 212:	60 5d       	subi	r22, 0xD0	; 208
 214:	f8 01       	movw	r30, r16
 216:	61 93       	st	Z+, r22
 218:	8f 01       	movw	r16, r30
		lcd4_n = lcd4_n / 10;
 21a:	62 2f       	mov	r22, r18
 21c:	73 2f       	mov	r23, r19
 21e:	84 2f       	mov	r24, r20
 220:	95 2f       	mov	r25, r21

void LCD4_OUT_DEC(unsigned long int lcd4_n, unsigned char lcd4_length)
{
	unsigned char lcd4_temp[lcd4_length];
	unsigned char i;
	for(i=0;i<lcd4_length;i++)
 222:	f3 94       	inc	r15
 224:	fe 14       	cp	r15, r14
 226:	88 f3       	brcs	.-30     	; 0x20a <LCD4_OUT_DEC+0x5c>
		lcd4_temp[i] = (lcd4_n % 10) + 0x30;
		lcd4_n = lcd4_n / 10;
	}
	for(i=lcd4_length;i>0;i--)
	{
		LCD4_OUT_DATA(lcd4_temp[i-1]);
 228:	f4 01       	movw	r30, r8
 22a:	ee 0d       	add	r30, r14
 22c:	f1 1d       	adc	r31, r1
 22e:	31 97       	sbiw	r30, 0x01	; 1
 230:	80 81       	ld	r24, Z
 232:	0e 94 66 00 	call	0xcc	; 0xcc <LCD4_OUT_DATA>
	for(i=0;i<lcd4_length;i++)
	{
		lcd4_temp[i] = (lcd4_n % 10) + 0x30;
		lcd4_n = lcd4_n / 10;
	}
	for(i=lcd4_length;i>0;i--)
 236:	ea 94       	dec	r14
 238:	b9 f7       	brne	.-18     	; 0x228 <LCD4_OUT_DEC+0x7a>
	{
		LCD4_OUT_DATA(lcd4_temp[i-1]);
	}
}
 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	f8 94       	cli
 23e:	7e be       	out	0x3e, r7	; 62
 240:	0f be       	out	0x3f, r0	; 63
 242:	6d be       	out	0x3d, r6	; 61
 244:	cf 91       	pop	r28
 246:	df 91       	pop	r29
 248:	1f 91       	pop	r17
 24a:	0f 91       	pop	r16
 24c:	ff 90       	pop	r15
 24e:	ef 90       	pop	r14
 250:	df 90       	pop	r13
 252:	cf 90       	pop	r12
 254:	bf 90       	pop	r11
 256:	af 90       	pop	r10
 258:	9f 90       	pop	r9
 25a:	8f 90       	pop	r8
 25c:	7f 90       	pop	r7
 25e:	6f 90       	pop	r6
 260:	08 95       	ret

00000262 <LCD4_DELAY>:

void LCD4_DELAY(unsigned int lcd4_n)
{
	unsigned int i;
	unsigned char j;
	lcd4_n = lcd4_n * FRE;
 262:	20 e0       	ldi	r18, 0x00	; 0
 264:	32 e1       	ldi	r19, 0x12	; 18
 266:	82 9f       	mul	r24, r18
 268:	a0 01       	movw	r20, r0
 26a:	83 9f       	mul	r24, r19
 26c:	50 0d       	add	r21, r0
 26e:	92 9f       	mul	r25, r18
 270:	50 0d       	add	r21, r0
 272:	11 24       	eor	r1, r1
	for(i=0;i<lcd4_n;i++)
 274:	41 15       	cp	r20, r1
 276:	51 05       	cpc	r21, r1
 278:	31 f0       	breq	.+12     	; 0x286 <LCD4_DELAY+0x24>
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	01 96       	adiw	r24, 0x01	; 1
 280:	84 17       	cp	r24, r20
 282:	95 07       	cpc	r25, r21
 284:	e0 f3       	brcs	.-8      	; 0x27e <LCD4_DELAY+0x1c>
 286:	08 95       	ret

00000288 <UART_INIT>:
{
	unsigned char uart_control = 0x80;

	// Khoi tao toc do baud

	UBRRH = (unsigned char)(uart_ubrr >> 8);
 288:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)uart_ubrr;
 28a:	89 b9       	out	0x09, r24	; 9

	// Cho phep modul truyen, nhan

	UCSRB |= (1<<RXEN)|(1<<TXEN);
 28c:	8a b1       	in	r24, 0x0a	; 10
 28e:	88 61       	ori	r24, 0x18	; 24
 290:	8a b9       	out	0x0a, r24	; 10

	// Dinh kich thuoc khung du lieu

	UCSRB &= ~(1<<UCSZ2);
 292:	52 98       	cbi	0x0a, 2	; 10

	switch(uart_size)
 294:	66 30       	cpi	r22, 0x06	; 6
 296:	71 f0       	breq	.+28     	; 0x2b4 <UART_INIT+0x2c>
 298:	67 30       	cpi	r22, 0x07	; 7
 29a:	18 f4       	brcc	.+6      	; 0x2a2 <UART_INIT+0x1a>
 29c:	65 30       	cpi	r22, 0x05	; 5
 29e:	79 f4       	brne	.+30     	; 0x2be <UART_INIT+0x36>
 2a0:	05 c0       	rjmp	.+10     	; 0x2ac <UART_INIT+0x24>
 2a2:	67 30       	cpi	r22, 0x07	; 7
 2a4:	29 f0       	breq	.+10     	; 0x2b0 <UART_INIT+0x28>
 2a6:	69 30       	cpi	r22, 0x09	; 9
 2a8:	51 f4       	brne	.+20     	; 0x2be <UART_INIT+0x36>
 2aa:	06 c0       	rjmp	.+12     	; 0x2b8 <UART_INIT+0x30>

// -----------------------------------------------------------------------------------

void UART_INIT(unsigned int uart_ubrr, unsigned char uart_size, unsigned char uart_parity, unsigned char uart_stop)
{
	unsigned char uart_control = 0x80;
 2ac:	80 e8       	ldi	r24, 0x80	; 128
 2ae:	08 c0       	rjmp	.+16     	; 0x2c0 <UART_INIT+0x38>
	UCSRB &= ~(1<<UCSZ2);

	switch(uart_size)
	{
		case 8:	uart_control |= 0x06; break;
		case 7: uart_control |= 0x04; break;
 2b0:	84 e8       	ldi	r24, 0x84	; 132
 2b2:	06 c0       	rjmp	.+12     	; 0x2c0 <UART_INIT+0x38>
		case 6: uart_control |= 0x02; break;
 2b4:	82 e8       	ldi	r24, 0x82	; 130
 2b6:	04 c0       	rjmp	.+8      	; 0x2c0 <UART_INIT+0x38>
		case 5: break;
		case 9:
		{
			uart_control |= 0x06;
			UCSRB |= (1<<UCSZ2);
 2b8:	52 9a       	sbi	0x0a, 2	; 10
		case 7: uart_control |= 0x04; break;
		case 6: uart_control |= 0x02; break;
		case 5: break;
		case 9:
		{
			uart_control |= 0x06;
 2ba:	86 e8       	ldi	r24, 0x86	; 134
			UCSRB |= (1<<UCSZ2);
			break;
 2bc:	01 c0       	rjmp	.+2      	; 0x2c0 <UART_INIT+0x38>

	UCSRB &= ~(1<<UCSZ2);

	switch(uart_size)
	{
		case 8:	uart_control |= 0x06; break;
 2be:	86 e8       	ldi	r24, 0x86	; 134
		default: uart_control |= 0x06;
	}

	// Khoi tao modul parity

	if(uart_parity == 1)
 2c0:	41 30       	cpi	r20, 0x01	; 1
 2c2:	11 f4       	brne	.+4      	; 0x2c8 <UART_INIT+0x40>
		uart_control |= 0x30;
 2c4:	80 63       	ori	r24, 0x30	; 48
 2c6:	03 c0       	rjmp	.+6      	; 0x2ce <UART_INIT+0x46>
	if(uart_parity == 2)
 2c8:	42 30       	cpi	r20, 0x02	; 2
 2ca:	09 f4       	brne	.+2      	; 0x2ce <UART_INIT+0x46>
		uart_control |= 0x20;
 2cc:	80 62       	ori	r24, 0x20	; 32

	// Chon so bit stop

	if(uart_stop == 2)
 2ce:	22 30       	cpi	r18, 0x02	; 2
 2d0:	09 f4       	brne	.+2      	; 0x2d4 <UART_INIT+0x4c>
		uart_control |= 0x08;
 2d2:	88 60       	ori	r24, 0x08	; 8

	// Nap vao UCSRC

	UCSRC = uart_control;
 2d4:	80 bd       	out	0x20, r24	; 32
}
 2d6:	08 95       	ret

000002d8 <UART_TRAN_BYTE>:

void UART_TRAN_BYTE(unsigned char uart_data)
{
	while(!(UCSRA & (1<<UDRE)));
 2d8:	5d 9b       	sbis	0x0b, 5	; 11
 2da:	fe cf       	rjmp	.-4      	; 0x2d8 <UART_TRAN_BYTE>

	UDR = uart_data;
 2dc:	8c b9       	out	0x0c, r24	; 12
}
 2de:	08 95       	ret

000002e0 <UART_TRAN_STR>:

void UART_TRAN_STR(char *uart_str)
{
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
 2e4:	ec 01       	movw	r28, r24
	while(*uart_str)
 2e6:	88 81       	ld	r24, Y
 2e8:	88 23       	and	r24, r24
 2ea:	31 f0       	breq	.+12     	; 0x2f8 <UART_TRAN_STR+0x18>
	while(!(UCSRA & (1<<UDRE)));

	UDR = uart_data;
}

void UART_TRAN_STR(char *uart_str)
 2ec:	21 96       	adiw	r28, 0x01	; 1
{
	while(*uart_str)
	{
		UART_TRAN_BYTE(*uart_str);
 2ee:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <UART_TRAN_BYTE>
	UDR = uart_data;
}

void UART_TRAN_STR(char *uart_str)
{
	while(*uart_str)
 2f2:	89 91       	ld	r24, Y+
 2f4:	88 23       	and	r24, r24
 2f6:	d9 f7       	brne	.-10     	; 0x2ee <UART_TRAN_STR+0xe>
	{
		UART_TRAN_BYTE(*uart_str);
		uart_str++;
	}
}
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <INIT>:
/* Ham duoc cac thay co cung cap san                                    */
/************************************************************************/
void INIT()
{
	//Khai bao trang thai output cho 8 chan led det
	DDRD |= 0xFF;
 2fe:	81 b3       	in	r24, 0x11	; 17
 300:	8f ef       	ldi	r24, 0xFF	; 255
 302:	81 bb       	out	0x11, r24	; 17
	PORTD |= 0x00;
 304:	92 b3       	in	r25, 0x12	; 18
 306:	92 bb       	out	0x12, r25	; 18
	//LED 7 thanh
	DDRC |= 0xFF;
 308:	94 b3       	in	r25, 0x14	; 20
 30a:	84 bb       	out	0x14, r24	; 20
	PORTC |= 0x00;
 30c:	85 b3       	in	r24, 0x15	; 21
 30e:	85 bb       	out	0x15, r24	; 21
	//Khoi tao cho chan ADC
	DDRA = 0x00;
 310:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0x00;
 312:	1b ba       	out	0x1b, r1	; 27
	
	//ADC_PRES(128);
	//ADC_AVCC();
	//ADC_IN(0);
}
 314:	08 95       	ret

00000316 <LED7_OUT>:
	}
}

void LED7_OUT(uint8_t num)
{
	uint8_t temp = PORTC;
 316:	95 b3       	in	r25, 0x15	; 21
	temp &= 0b00001000;
 318:	98 70       	andi	r25, 0x08	; 8
	
	switch(num)
 31a:	84 30       	cpi	r24, 0x04	; 4
 31c:	e1 f0       	breq	.+56     	; 0x356 <LED7_OUT+0x40>
 31e:	85 30       	cpi	r24, 0x05	; 5
 320:	48 f4       	brcc	.+18     	; 0x334 <LED7_OUT+0x1e>
 322:	81 30       	cpi	r24, 0x01	; 1
 324:	91 f0       	breq	.+36     	; 0x34a <LED7_OUT+0x34>
 326:	81 30       	cpi	r24, 0x01	; 1
 328:	70 f0       	brcs	.+28     	; 0x346 <LED7_OUT+0x30>
 32a:	82 30       	cpi	r24, 0x02	; 2
 32c:	81 f0       	breq	.+32     	; 0x34e <LED7_OUT+0x38>
 32e:	83 30       	cpi	r24, 0x03	; 3
 330:	d9 f4       	brne	.+54     	; 0x368 <LED7_OUT+0x52>
 332:	0f c0       	rjmp	.+30     	; 0x352 <LED7_OUT+0x3c>
 334:	86 30       	cpi	r24, 0x06	; 6
 336:	99 f0       	breq	.+38     	; 0x35e <LED7_OUT+0x48>
 338:	86 30       	cpi	r24, 0x06	; 6
 33a:	78 f0       	brcs	.+30     	; 0x35a <LED7_OUT+0x44>
 33c:	87 30       	cpi	r24, 0x07	; 7
 33e:	89 f0       	breq	.+34     	; 0x362 <LED7_OUT+0x4c>
 340:	89 30       	cpi	r24, 0x09	; 9
 342:	91 f4       	brne	.+36     	; 0x368 <LED7_OUT+0x52>
 344:	10 c0       	rjmp	.+32     	; 0x366 <LED7_OUT+0x50>
	{
		case 0: temp |= 0b10000000; break;
 346:	90 68       	ori	r25, 0x80	; 128
 348:	0f c0       	rjmp	.+30     	; 0x368 <LED7_OUT+0x52>
		case 1: temp |= 0b11100011; break;
 34a:	93 6e       	ori	r25, 0xE3	; 227
 34c:	0d c0       	rjmp	.+26     	; 0x368 <LED7_OUT+0x52>
		case 2: temp |= 0b01000100; break;
 34e:	94 64       	ori	r25, 0x44	; 68
 350:	0b c0       	rjmp	.+22     	; 0x368 <LED7_OUT+0x52>
		case 3: temp |= 0b01000001; break;
 352:	91 64       	ori	r25, 0x41	; 65
 354:	09 c0       	rjmp	.+18     	; 0x368 <LED7_OUT+0x52>
		case 4: temp |= 0b00100011; break;
 356:	93 62       	ori	r25, 0x23	; 35
 358:	07 c0       	rjmp	.+14     	; 0x368 <LED7_OUT+0x52>
		case 5: temp |= 0b00010001; break;
 35a:	91 61       	ori	r25, 0x11	; 17
 35c:	05 c0       	rjmp	.+10     	; 0x368 <LED7_OUT+0x52>
		case 6: temp |= 0b00010000; break;
 35e:	90 61       	ori	r25, 0x10	; 16
 360:	03 c0       	rjmp	.+6      	; 0x368 <LED7_OUT+0x52>
		case 7: temp |= 0b11000011; break;
 362:	93 6c       	ori	r25, 0xC3	; 195
 364:	01 c0       	rjmp	.+2      	; 0x368 <LED7_OUT+0x52>
		case 8: temp |= 0b00000000; break;
		case 9: temp |= 0b00000001; break;
 366:	91 60       	ori	r25, 0x01	; 1
	}
	PORTC = temp;
 368:	95 bb       	out	0x15, r25	; 21
}
 36a:	08 95       	ret

0000036c <PORT>:
	//ADC_AVCC();
	//ADC_IN(0);
}
	
void PORT()
{
 36c:	df 92       	push	r13
 36e:	ef 92       	push	r14
 370:	ff 92       	push	r15
 372:	0f 93       	push	r16
 374:	1f 93       	push	r17
	uint8_t led_shift = 0xFF;
	uint8_t led_7_count = 0x00;
 376:	10 e0       	ldi	r17, 0x00	; 0
	//ADC_IN(0);
}
	
void PORT()
{
	uint8_t led_shift = 0xFF;
 378:	0f ef       	ldi	r16, 0xFF	; 255
	{
		PORTD = led_shift;
		if(led_shift != 0)
			led_shift = led_shift << 2;
		else
			led_shift = 0xFF;
 37a:	ee 24       	eor	r14, r14
 37c:	ea 94       	dec	r14
		LED7_OUT(led_7_count);
		
		PORTC ^= (1 << PC3);
 37e:	ff 24       	eor	r15, r15
 380:	68 94       	set
 382:	f3 f8       	bld	r15, 3
		led_7_count += 2;
		if (led_7_count > 8)
		{
			led_7_count = 0;
 384:	dd 24       	eor	r13, r13
 386:	01 c0       	rjmp	.+2      	; 0x38a <PORT+0x1e>
 388:	1d 2d       	mov	r17, r13
	uint8_t led_shift = 0xFF;
	uint8_t led_7_count = 0x00;
	
	for(;;)
	{
		PORTD = led_shift;
 38a:	02 bb       	out	0x12, r16	; 18
		if(led_shift != 0)
 38c:	00 23       	and	r16, r16
 38e:	19 f0       	breq	.+6      	; 0x396 <PORT+0x2a>
			led_shift = led_shift << 2;
 390:	00 0f       	add	r16, r16
 392:	00 0f       	add	r16, r16
 394:	01 c0       	rjmp	.+2      	; 0x398 <PORT+0x2c>
		else
			led_shift = 0xFF;
 396:	0e 2d       	mov	r16, r14
		LED7_OUT(led_7_count);
 398:	81 2f       	mov	r24, r17
 39a:	0e 94 8b 01 	call	0x316	; 0x316 <LED7_OUT>
		
		PORTC ^= (1 << PC3);
 39e:	85 b3       	in	r24, 0x15	; 21
 3a0:	8f 25       	eor	r24, r15
 3a2:	85 bb       	out	0x15, r24	; 21
		led_7_count += 2;
 3a4:	1e 5f       	subi	r17, 0xFE	; 254
		if (led_7_count > 8)
 3a6:	19 30       	cpi	r17, 0x09	; 9
 3a8:	78 f7       	brcc	.-34     	; 0x388 <PORT+0x1c>
 3aa:	ef cf       	rjmp	.-34     	; 0x38a <PORT+0x1e>

000003ac <DELAY_MS>:
	PORTC = temp;
}
void DELAY_MS(unsigned int mili_count)
{
	unsigned int i,j;
	mili_count = mili_count * FRE;
 3ac:	20 e0       	ldi	r18, 0x00	; 0
 3ae:	32 e1       	ldi	r19, 0x12	; 18
 3b0:	82 9f       	mul	r24, r18
 3b2:	a0 01       	movw	r20, r0
 3b4:	83 9f       	mul	r24, r19
 3b6:	50 0d       	add	r21, r0
 3b8:	92 9f       	mul	r25, r18
 3ba:	50 0d       	add	r21, r0
 3bc:	11 24       	eor	r1, r1
	for (i = 0; i<mili_count; i++)
 3be:	41 15       	cp	r20, r1
 3c0:	51 05       	cpc	r21, r1
 3c2:	49 f4       	brne	.+18     	; 0x3d6 <DELAY_MS+0x2a>
 3c4:	08 95       	ret
 3c6:	01 97       	sbiw	r24, 0x01	; 1
		for(j = 0; j < 53; j++)
 3c8:	f1 f7       	brne	.-4      	; 0x3c6 <DELAY_MS+0x1a>
}
void DELAY_MS(unsigned int mili_count)
{
	unsigned int i,j;
	mili_count = mili_count * FRE;
	for (i = 0; i<mili_count; i++)
 3ca:	2f 5f       	subi	r18, 0xFF	; 255
 3cc:	3f 4f       	sbci	r19, 0xFF	; 255
 3ce:	24 17       	cp	r18, r20
 3d0:	35 07       	cpc	r19, r21
 3d2:	18 f0       	brcs	.+6      	; 0x3da <DELAY_MS+0x2e>
 3d4:	08 95       	ret
 3d6:	20 e0       	ldi	r18, 0x00	; 0
 3d8:	30 e0       	ldi	r19, 0x00	; 0
		case 9: temp |= 0b00000001; break;
	}
	PORTC = temp;
}
void DELAY_MS(unsigned int mili_count)
{
 3da:	85 e3       	ldi	r24, 0x35	; 53
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	f3 cf       	rjmp	.-26     	; 0x3c6 <DELAY_MS+0x1a>

000003e0 <PB_CHECK>:
		}
	}
}
uint8_t PB_CHECK()
{
	if ((PINB & 0x0F) != 0x0F)
 3e0:	86 b3       	in	r24, 0x16	; 22
 3e2:	8f 70       	andi	r24, 0x0F	; 15
 3e4:	8f 30       	cpi	r24, 0x0F	; 15
 3e6:	41 f0       	breq	.+16     	; 0x3f8 <PB_CHECK+0x18>
	{
		if(!(PINB & (1<<PB0)))
 3e8:	b0 9b       	sbis	0x16, 0	; 22
 3ea:	09 c0       	rjmp	.+18     	; 0x3fe <PB_CHECK+0x1e>
			return 1;
		
		if(!(PINB & (1<<PB1)))
 3ec:	b1 9b       	sbis	0x16, 1	; 22
 3ee:	09 c0       	rjmp	.+18     	; 0x402 <PB_CHECK+0x22>
			return 2;
			
		if(!(PINB & (1<<PB2)))
 3f0:	b2 9b       	sbis	0x16, 2	; 22
 3f2:	09 c0       	rjmp	.+18     	; 0x406 <PB_CHECK+0x26>
			return 3;
			
		if(!(PINB & (1<<PB3)))
 3f4:	b3 9b       	sbis	0x16, 3	; 22
 3f6:	09 c0       	rjmp	.+18     	; 0x40a <PB_CHECK+0x2a>
			return 4;
	}
	return push_button;
 3f8:	80 91 3e 01 	lds	r24, 0x013E
 3fc:	08 95       	ret
uint8_t PB_CHECK()
{
	if ((PINB & 0x0F) != 0x0F)
	{
		if(!(PINB & (1<<PB0)))
			return 1;
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	08 95       	ret
		
		if(!(PINB & (1<<PB1)))
			return 2;
 402:	82 e0       	ldi	r24, 0x02	; 2
 404:	08 95       	ret
			
		if(!(PINB & (1<<PB2)))
			return 3;
 406:	83 e0       	ldi	r24, 0x03	; 3
 408:	08 95       	ret
			
		if(!(PINB & (1<<PB3)))
			return 4;
 40a:	84 e0       	ldi	r24, 0x04	; 4
	}
	return push_button;
}
 40c:	08 95       	ret

0000040e <PB_2_LED>:
		{
			//NULL
		}
}
void PB_2_LED()
{
 40e:	df 92       	push	r13
 410:	ef 92       	push	r14
 412:	ff 92       	push	r15
 414:	0f 93       	push	r16
 416:	1f 93       	push	r17
		{
			case 1: PORTD = 0b11111100; break;	
			case 2: PORTD = 0b11110011; break;	
			case 3: PORTD = 0b11001111; break;
			case 4: PORTD = 0b00111111; break;			
			default: PORTD = 0xFF;	
 418:	ee 24       	eor	r14, r14
 41a:	ea 94       	dec	r14
		LED7_OUT(push_button);
		switch(push_button)
		{
			case 1: PORTD = 0b11111100; break;	
			case 2: PORTD = 0b11110011; break;	
			case 3: PORTD = 0b11001111; break;
 41c:	0f 2e       	mov	r0, r31
 41e:	ff ec       	ldi	r31, 0xCF	; 207
 420:	ff 2e       	mov	r15, r31
 422:	f0 2d       	mov	r31, r0
			case 4: PORTD = 0b00111111; break;			
 424:	0f e3       	ldi	r16, 0x3F	; 63
	{
		push_button = PB_CHECK();
		LED7_OUT(push_button);
		switch(push_button)
		{
			case 1: PORTD = 0b11111100; break;	
 426:	1c ef       	ldi	r17, 0xFC	; 252
			case 2: PORTD = 0b11110011; break;	
 428:	0f 2e       	mov	r0, r31
 42a:	f3 ef       	ldi	r31, 0xF3	; 243
 42c:	df 2e       	mov	r13, r31
 42e:	f0 2d       	mov	r31, r0
}
void PB_2_LED()
{
	for(;;)
	{
		push_button = PB_CHECK();
 430:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <PB_CHECK>
 434:	80 93 3e 01 	sts	0x013E, r24
		LED7_OUT(push_button);
 438:	0e 94 8b 01 	call	0x316	; 0x316 <LED7_OUT>
		switch(push_button)
 43c:	80 91 3e 01 	lds	r24, 0x013E
 440:	82 30       	cpi	r24, 0x02	; 2
 442:	61 f0       	breq	.+24     	; 0x45c <PB_2_LED+0x4e>
 444:	83 30       	cpi	r24, 0x03	; 3
 446:	18 f4       	brcc	.+6      	; 0x44e <PB_2_LED+0x40>
 448:	81 30       	cpi	r24, 0x01	; 1
 44a:	71 f4       	brne	.+28     	; 0x468 <__stack+0x9>
 44c:	05 c0       	rjmp	.+10     	; 0x458 <PB_2_LED+0x4a>
 44e:	83 30       	cpi	r24, 0x03	; 3
 450:	39 f0       	breq	.+14     	; 0x460 <__stack+0x1>
 452:	84 30       	cpi	r24, 0x04	; 4
 454:	49 f4       	brne	.+18     	; 0x468 <__stack+0x9>
 456:	06 c0       	rjmp	.+12     	; 0x464 <__stack+0x5>
		{
			case 1: PORTD = 0b11111100; break;	
 458:	12 bb       	out	0x12, r17	; 18
 45a:	ea cf       	rjmp	.-44     	; 0x430 <PB_2_LED+0x22>
			case 2: PORTD = 0b11110011; break;	
 45c:	d2 ba       	out	0x12, r13	; 18
 45e:	e8 cf       	rjmp	.-48     	; 0x430 <PB_2_LED+0x22>
			case 3: PORTD = 0b11001111; break;
 460:	f2 ba       	out	0x12, r15	; 18
 462:	e6 cf       	rjmp	.-52     	; 0x430 <PB_2_LED+0x22>
			case 4: PORTD = 0b00111111; break;			
 464:	02 bb       	out	0x12, r16	; 18
 466:	e4 cf       	rjmp	.-56     	; 0x430 <PB_2_LED+0x22>
			default: PORTD = 0xFF;	
 468:	e2 ba       	out	0x12, r14	; 18
 46a:	e2 cf       	rjmp	.-60     	; 0x430 <PB_2_LED+0x22>

0000046c <ADC_2_LCD>:
	}
	return push_button;
}
void ADC_2_LCD()
{
	DDRD |= (1<<PD5);
 46c:	8d 9a       	sbi	0x11, 5	; 17
	PORTD &= ~(1<<PD5);
 46e:	95 98       	cbi	0x12, 5	; 18
	PORTC |= 0x0F;
 470:	85 b3       	in	r24, 0x15	; 21
 472:	8f 60       	ori	r24, 0x0F	; 15
 474:	85 bb       	out	0x15, r24	; 21
	
	LCD4_INIT(0,0);
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	60 e0       	ldi	r22, 0x00	; 0
 47a:	0e 94 8b 00 	call	0x116	; 0x116 <LCD4_INIT>
	
	LCD4_CUR_GOTO(1,0);
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	60 e0       	ldi	r22, 0x00	; 0
 482:	0e 94 bc 00 	call	0x178	; 0x178 <LCD4_CUR_GOTO>
	LCD4_OUT_STR("ADC&LCD byDNhat");
 486:	80 e6       	ldi	r24, 0x60	; 96
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	0e 94 c8 00 	call	0x190	; 0x190 <LCD4_OUT_STR>
	
	LCD4_CUR_GOTO(2,0);
 48e:	82 e0       	ldi	r24, 0x02	; 2
 490:	60 e0       	ldi	r22, 0x00	; 0
 492:	0e 94 bc 00 	call	0x178	; 0x178 <LCD4_CUR_GOTO>
	LCD4_OUT_STR("ADC0: 0000/1024");
 496:	80 e7       	ldi	r24, 0x70	; 112
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	0e 94 c8 00 	call	0x190	; 0x190 <LCD4_OUT_STR>
	
	for (;;)
	{
		ADC_STA_CONVERT();
 49e:	36 9a       	sbi	0x06, 6	; 6
		LCD4_CUR_GOTO(2,6);
 4a0:	82 e0       	ldi	r24, 0x02	; 2
 4a2:	66 e0       	ldi	r22, 0x06	; 6
 4a4:	0e 94 bc 00 	call	0x178	; 0x178 <LCD4_CUR_GOTO>
		LCD4_OUT_DEC(ADC,4);
 4a8:	64 b1       	in	r22, 0x04	; 4
 4aa:	75 b1       	in	r23, 0x05	; 5
 4ac:	80 e0       	ldi	r24, 0x00	; 0
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	44 e0       	ldi	r20, 0x04	; 4
 4b2:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LCD4_OUT_DEC>
 4b6:	f3 cf       	rjmp	.-26     	; 0x49e <ADC_2_LCD+0x32>

000004b8 <LCD4_DIS_SHIFT>:
		
		LCD4_DIS_SHIFT(1, 1);
	}
}
void LCD4_DIS_SHIFT(unsigned char lcd4_direct, unsigned char lcd4_step)
{
 4b8:	0f 93       	push	r16
 4ba:	1f 93       	push	r17
 4bc:	06 2f       	mov	r16, r22
	unsigned char i;
	if(lcd4_direct == 0)
 4be:	88 23       	and	r24, r24
 4c0:	19 f0       	breq	.+6      	; 0x4c8 <LCD4_DIS_SHIFT+0x10>
		for(i = 0; i< lcd4_step; i++)
			LCD4_OUT_CMD(0x1C);
	else
		for(i = 0; i< lcd4_step; i++)
 4c2:	66 23       	and	r22, r22
 4c4:	59 f4       	brne	.+22     	; 0x4dc <LCD4_DIS_SHIFT+0x24>
 4c6:	11 c0       	rjmp	.+34     	; 0x4ea <LCD4_DIS_SHIFT+0x32>
}
void LCD4_DIS_SHIFT(unsigned char lcd4_direct, unsigned char lcd4_step)
{
	unsigned char i;
	if(lcd4_direct == 0)
		for(i = 0; i< lcd4_step; i++)
 4c8:	66 23       	and	r22, r22
 4ca:	79 f0       	breq	.+30     	; 0x4ea <LCD4_DIS_SHIFT+0x32>
 4cc:	10 e0       	ldi	r17, 0x00	; 0
			LCD4_OUT_CMD(0x1C);
 4ce:	8c e1       	ldi	r24, 0x1C	; 28
 4d0:	0e 94 49 00 	call	0x92	; 0x92 <LCD4_OUT_CMD>
}
void LCD4_DIS_SHIFT(unsigned char lcd4_direct, unsigned char lcd4_step)
{
	unsigned char i;
	if(lcd4_direct == 0)
		for(i = 0; i< lcd4_step; i++)
 4d4:	1f 5f       	subi	r17, 0xFF	; 255
 4d6:	10 17       	cp	r17, r16
 4d8:	d0 f3       	brcs	.-12     	; 0x4ce <LCD4_DIS_SHIFT+0x16>
 4da:	07 c0       	rjmp	.+14     	; 0x4ea <LCD4_DIS_SHIFT+0x32>
			LCD4_OUT_CMD(0x1C);
	else
		for(i = 0; i< lcd4_step; i++)
 4dc:	10 e0       	ldi	r17, 0x00	; 0
			LCD4_OUT_CMD(0x18);
 4de:	88 e1       	ldi	r24, 0x18	; 24
 4e0:	0e 94 49 00 	call	0x92	; 0x92 <LCD4_OUT_CMD>
	unsigned char i;
	if(lcd4_direct == 0)
		for(i = 0; i< lcd4_step; i++)
			LCD4_OUT_CMD(0x1C);
	else
		for(i = 0; i< lcd4_step; i++)
 4e4:	1f 5f       	subi	r17, 0xFF	; 255
 4e6:	10 17       	cp	r17, r16
 4e8:	d0 f3       	brcs	.-12     	; 0x4de <LCD4_DIS_SHIFT+0x26>
			LCD4_OUT_CMD(0x18);
}
 4ea:	1f 91       	pop	r17
 4ec:	0f 91       	pop	r16
 4ee:	08 95       	ret

000004f0 <UART>:
		LCD4_OUT_DEC(ADC,4);
		DELAY_MS(200);
	}
}
void UART()
{
 4f0:	0f 93       	push	r16
 4f2:	1f 93       	push	r17
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
	UART_INIT(51, 8, 0 ,1);
 4f8:	83 e3       	ldi	r24, 0x33	; 51
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	68 e0       	ldi	r22, 0x08	; 8
 4fe:	40 e0       	ldi	r20, 0x00	; 0
 500:	21 e0       	ldi	r18, 0x01	; 1
 502:	0e 94 44 01 	call	0x288	; 0x288 <UART_INIT>
	DDRD |= (1<PD5);
 506:	88 9a       	sbi	0x11, 0	; 17
	PORTD &= ~(1<<PD5);
 508:	95 98       	cbi	0x12, 5	; 18
	PORTC |= 0x0F;
 50a:	85 b3       	in	r24, 0x15	; 21
 50c:	8f 60       	ori	r24, 0x0F	; 15
 50e:	85 bb       	out	0x15, r24	; 21
	
	LCD4_INIT(0,0);
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	60 e0       	ldi	r22, 0x00	; 0
 514:	0e 94 8b 00 	call	0x116	; 0x116 <LCD4_INIT>
	
	LCD4_CUR_GOTO(1,0);
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	60 e0       	ldi	r22, 0x00	; 0
 51c:	0e 94 bc 00 	call	0x178	; 0x178 <LCD4_CUR_GOTO>
	LCD4_OUT_STR("Le Duy Nhat, 20163037, DTVT07-K61");
 520:	80 e8       	ldi	r24, 0x80	; 128
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	0e 94 c8 00 	call	0x190	; 0x190 <LCD4_OUT_STR>
	LCD4_CUR_GOTO(2,0);
 528:	82 e0       	ldi	r24, 0x02	; 2
 52a:	60 e0       	ldi	r22, 0x00	; 0
 52c:	0e 94 bc 00 	call	0x178	; 0x178 <LCD4_CUR_GOTO>
	LCD4_OUT_STR("Vien DTVT, Truong DHBK Ha Noi");
 530:	82 ea       	ldi	r24, 0xA2	; 162
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	0e 94 c8 00 	call	0x190	; 0x190 <LCD4_OUT_STR>
	
	DELAY_MS(1000);
	
	while(1)
	{
		UART_TRAN_STR("Le Duy Nhat, 20163037, DTVT07-k61");
 538:	c0 ec       	ldi	r28, 0xC0	; 192
 53a:	d0 e0       	ldi	r29, 0x00	; 0
		UART_TRAN_BYTE(13);
		UART_TRAN_BYTE(10);
		
		UART_TRAN_STR("Vien DTVT, Truong DHBK Ha Noi");
 53c:	02 ea       	ldi	r16, 0xA2	; 162
 53e:	10 e0       	ldi	r17, 0x00	; 0
	
	DELAY_MS(1000);
	
	while(1)
	{
		UART_TRAN_STR("Le Duy Nhat, 20163037, DTVT07-k61");
 540:	ce 01       	movw	r24, r28
 542:	0e 94 70 01 	call	0x2e0	; 0x2e0 <UART_TRAN_STR>
		UART_TRAN_BYTE(13);
 546:	8d e0       	ldi	r24, 0x0D	; 13
 548:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <UART_TRAN_BYTE>
		UART_TRAN_BYTE(10);
 54c:	8a e0       	ldi	r24, 0x0A	; 10
 54e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <UART_TRAN_BYTE>
		
		UART_TRAN_STR("Vien DTVT, Truong DHBK Ha Noi");
 552:	c8 01       	movw	r24, r16
 554:	0e 94 70 01 	call	0x2e0	; 0x2e0 <UART_TRAN_STR>
		UART_TRAN_BYTE(13);
 558:	8d e0       	ldi	r24, 0x0D	; 13
 55a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <UART_TRAN_BYTE>
		UART_TRAN_BYTE(10);
 55e:	8a e0       	ldi	r24, 0x0A	; 10
 560:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <UART_TRAN_BYTE>
		
		UART_TRAN_BYTE(13);
 564:	8d e0       	ldi	r24, 0x0D	; 13
 566:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <UART_TRAN_BYTE>
		UART_TRAN_BYTE(10);
 56a:	8a e0       	ldi	r24, 0x0A	; 10
 56c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <UART_TRAN_BYTE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 570:	8f ef       	ldi	r24, 0xFF	; 255
 572:	99 e6       	ldi	r25, 0x69	; 105
 574:	a8 e1       	ldi	r26, 0x18	; 24
 576:	81 50       	subi	r24, 0x01	; 1
 578:	90 40       	sbci	r25, 0x00	; 0
 57a:	a0 40       	sbci	r26, 0x00	; 0
 57c:	e1 f7       	brne	.-8      	; 0x576 <UART+0x86>
 57e:	00 c0       	rjmp	.+0      	; 0x580 <UART+0x90>
 580:	00 00       	nop
		
		//DELAY_MS(1000);
		_delay_ms(1000);
		
		LCD4_DIS_SHIFT(1, 1);
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	61 e0       	ldi	r22, 0x01	; 1
 586:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <LCD4_DIS_SHIFT>
 58a:	da cf       	rjmp	.-76     	; 0x540 <UART+0x50>

0000058c <LED7_OUT_new>:

/************************************************************************/
/* Ham moi do minh them vao                                             */
/************************************************************************/
void LED7_OUT_new(uint8_t num)
{
 58c:	df 93       	push	r29
 58e:	cf 93       	push	r28
 590:	cd b7       	in	r28, 0x3d	; 61
 592:	de b7       	in	r29, 0x3e	; 62
 594:	2a 97       	sbiw	r28, 0x0a	; 10
 596:	0f b6       	in	r0, 0x3f	; 63
 598:	f8 94       	cli
 59a:	de bf       	out	0x3e, r29	; 62
 59c:	0f be       	out	0x3f, r0	; 63
 59e:	cd bf       	out	0x3d, r28	; 61

	char array[]={0x88,0xEB,0x4C,0x49,0x2B,0x19,0x18,0xCB,0x08,0x09};
 5a0:	de 01       	movw	r26, r28
 5a2:	11 96       	adiw	r26, 0x01	; 1
 5a4:	e4 e3       	ldi	r30, 0x34	; 52
 5a6:	f1 e0       	ldi	r31, 0x01	; 1
 5a8:	9a e0       	ldi	r25, 0x0A	; 10
 5aa:	01 90       	ld	r0, Z+
 5ac:	0d 92       	st	X+, r0
 5ae:	91 50       	subi	r25, 0x01	; 1
 5b0:	e1 f7       	brne	.-8      	; 0x5aa <LED7_OUT_new+0x1e>
   
    while(1)
    {
		for(int i=0;i<10;i++)
		{
			PORTC = array[num]; /* write data on to the LED port */
 5b2:	fe 01       	movw	r30, r28
 5b4:	e8 0f       	add	r30, r24
 5b6:	f1 1d       	adc	r31, r1
 5b8:	41 81       	ldd	r20, Z+1	; 0x01
	char array[]={0x88,0xEB,0x4C,0x49,0x2B,0x19,0x18,0xCB,0x08,0x09};
					/* write hex value for CA display from 0 to 9 */ 
   
    while(1)
    {
		for(int i=0;i<10;i++)
 5ba:	80 e0       	ldi	r24, 0x00	; 0
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	20 e0       	ldi	r18, 0x00	; 0
 5c0:	30 e0       	ldi	r19, 0x00	; 0
		{
			PORTC = array[num]; /* write data on to the LED port */
 5c2:	45 bb       	out	0x15, r20	; 21
	char array[]={0x88,0xEB,0x4C,0x49,0x2B,0x19,0x18,0xCB,0x08,0x09};
					/* write hex value for CA display from 0 to 9 */ 
   
    while(1)
    {
		for(int i=0;i<10;i++)
 5c4:	01 96       	adiw	r24, 0x01	; 1
 5c6:	8a 30       	cpi	r24, 0x0A	; 10
 5c8:	91 05       	cpc	r25, r1
 5ca:	dc f3       	brlt	.-10     	; 0x5c2 <LED7_OUT_new+0x36>
 5cc:	c9 01       	movw	r24, r18
 5ce:	f9 cf       	rjmp	.-14     	; 0x5c2 <LED7_OUT_new+0x36>

000005d0 <PORT_new>:
			PORTC = array[num]; /* write data on to the LED port */
			DELAY_MS(1000); /* wait for 1 second */ 
		}
    }
}
void PORT_new(){
 5d0:	ef 92       	push	r14
 5d2:	ff 92       	push	r15
 5d4:	0f 93       	push	r16
 5d6:	1f 93       	push	r17
 5d8:	df 93       	push	r29
 5da:	cf 93       	push	r28
 5dc:	cd b7       	in	r28, 0x3d	; 61
 5de:	de b7       	in	r29, 0x3e	; 62
 5e0:	2a 97       	sbiw	r28, 0x0a	; 10
 5e2:	0f b6       	in	r0, 0x3f	; 63
 5e4:	f8 94       	cli
 5e6:	de bf       	out	0x3e, r29	; 62
 5e8:	0f be       	out	0x3f, r0	; 63
 5ea:	cd bf       	out	0x3d, r28	; 61
	char array[]={0x88,0xEB,0x4C,0x49,0x2B,0x19,0x18,0xCB,0x08,0x09};
 5ec:	de 01       	movw	r26, r28
 5ee:	11 96       	adiw	r26, 0x01	; 1
 5f0:	ea e2       	ldi	r30, 0x2A	; 42
 5f2:	f1 e0       	ldi	r31, 0x01	; 1
 5f4:	8a e0       	ldi	r24, 0x0A	; 10
 5f6:	01 90       	ld	r0, Z+
 5f8:	0d 92       	st	X+, r0
 5fa:	81 50       	subi	r24, 0x01	; 1
 5fc:	e1 f7       	brne	.-8      	; 0x5f6 <PORT_new+0x26>
					/* write hex value for CA display from 0 to 9 */ 
    uint8_t led_shift = 0xFF;
 5fe:	6f ef       	ldi	r22, 0xFF	; 255
    while(1)
    {
		for(int i=0;i<5;i++)
 600:	80 e0       	ldi	r24, 0x00	; 0
 602:	90 e0       	ldi	r25, 0x00	; 0
		{
			PORTD = led_shift;
			if(led_shift != 0 && i < 8)
				led_shift = led_shift << 2;
			else
				led_shift = 0xFF;
 604:	af ef       	ldi	r26, 0xFF	; 255
			
			PORTC = array[2*i]; /* write data on to the LED port */
 606:	7e 01       	movw	r14, r28
 608:	08 94       	sec
 60a:	e1 1c       	adc	r14, r1
 60c:	f1 1c       	adc	r15, r1
	char array[]={0x88,0xEB,0x4C,0x49,0x2B,0x19,0x18,0xCB,0x08,0x09};
					/* write hex value for CA display from 0 to 9 */ 
    uint8_t led_shift = 0xFF;
    while(1)
    {
		for(int i=0;i<5;i++)
 60e:	40 e0       	ldi	r20, 0x00	; 0
 610:	50 e0       	ldi	r21, 0x00	; 0
		{
			PORTD = led_shift;
 612:	62 bb       	out	0x12, r22	; 18
			if(led_shift != 0 && i < 8)
 614:	66 23       	and	r22, r22
 616:	31 f0       	breq	.+12     	; 0x624 <PORT_new+0x54>
 618:	88 30       	cpi	r24, 0x08	; 8
 61a:	91 05       	cpc	r25, r1
 61c:	2c f4       	brge	.+10     	; 0x628 <PORT_new+0x58>
				led_shift = led_shift << 2;
 61e:	66 0f       	add	r22, r22
 620:	66 0f       	add	r22, r22
 622:	03 c0       	rjmp	.+6      	; 0x62a <PORT_new+0x5a>
			else
				led_shift = 0xFF;
 624:	6a 2f       	mov	r22, r26
 626:	01 c0       	rjmp	.+2      	; 0x62a <PORT_new+0x5a>
 628:	6a 2f       	mov	r22, r26
			
			PORTC = array[2*i]; /* write data on to the LED port */
 62a:	fc 01       	movw	r30, r24
 62c:	ee 0f       	add	r30, r30
 62e:	ff 1f       	adc	r31, r31
 630:	ee 0d       	add	r30, r14
 632:	ff 1d       	adc	r31, r15
 634:	70 81       	ld	r23, Z
 636:	75 bb       	out	0x15, r23	; 21
 638:	0f ef       	ldi	r16, 0xFF	; 255
 63a:	19 e6       	ldi	r17, 0x69	; 105
 63c:	28 e1       	ldi	r18, 0x18	; 24
 63e:	01 50       	subi	r16, 0x01	; 1
 640:	10 40       	sbci	r17, 0x00	; 0
 642:	20 40       	sbci	r18, 0x00	; 0
 644:	e1 f7       	brne	.-8      	; 0x63e <PORT_new+0x6e>
 646:	00 c0       	rjmp	.+0      	; 0x648 <PORT_new+0x78>
 648:	00 00       	nop
	char array[]={0x88,0xEB,0x4C,0x49,0x2B,0x19,0x18,0xCB,0x08,0x09};
					/* write hex value for CA display from 0 to 9 */ 
    uint8_t led_shift = 0xFF;
    while(1)
    {
		for(int i=0;i<5;i++)
 64a:	01 96       	adiw	r24, 0x01	; 1
 64c:	85 30       	cpi	r24, 0x05	; 5
 64e:	91 05       	cpc	r25, r1
 650:	04 f3       	brlt	.-64     	; 0x612 <PORT_new+0x42>
 652:	ca 01       	movw	r24, r20
 654:	de cf       	rjmp	.-68     	; 0x612 <PORT_new+0x42>

00000656 <LCD_Command>:
		}	
    }
}	
void LCD_Command(unsigned char cmnd)
{
	LCD_Data_Port= cmnd;
 656:	85 bb       	out	0x15, r24	; 21
	LCD_Command_Port &= ~(1<<RS);	/* RS=0 command reg. */
 658:	96 98       	cbi	0x12, 6	; 18
	LCD_Command_Port &= ~(1<<RW);	/* RW=0 Write operation */
 65a:	95 98       	cbi	0x12, 5	; 18
	LCD_Command_Port |= (1<<EN);	/* Enable pulse */
 65c:	97 9a       	sbi	0x12, 7	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 65e:	82 e0       	ldi	r24, 0x02	; 2
 660:	8a 95       	dec	r24
 662:	f1 f7       	brne	.-4      	; 0x660 <LCD_Command+0xa>
 664:	00 c0       	rjmp	.+0      	; 0x666 <LCD_Command+0x10>
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
 666:	97 98       	cbi	0x12, 7	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 668:	8f e6       	ldi	r24, 0x6F	; 111
 66a:	97 e1       	ldi	r25, 0x17	; 23
 66c:	01 97       	sbiw	r24, 0x01	; 1
 66e:	f1 f7       	brne	.-4      	; 0x66c <LCD_Command+0x16>
 670:	00 c0       	rjmp	.+0      	; 0x672 <LCD_Command+0x1c>
 672:	00 00       	nop
	_delay_ms(3);
}
 674:	08 95       	ret

00000676 <LCD_Char>:
void LCD_Char (unsigned char char_data)	/* LCD data write function */
{
	LCD_Data_Port= char_data;
 676:	85 bb       	out	0x15, r24	; 21
	LCD_Command_Port |= (1<<RS);	/* RS=1 Data reg. */
 678:	96 9a       	sbi	0x12, 6	; 18
	LCD_Command_Port &= ~(1<<RW);	/* RW=0 write operation */
 67a:	95 98       	cbi	0x12, 5	; 18
	LCD_Command_Port |= (1<<EN);	/* Enable Pulse */
 67c:	97 9a       	sbi	0x12, 7	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 67e:	82 e0       	ldi	r24, 0x02	; 2
 680:	8a 95       	dec	r24
 682:	f1 f7       	brne	.-4      	; 0x680 <LCD_Char+0xa>
 684:	00 c0       	rjmp	.+0      	; 0x686 <LCD_Char+0x10>
	_delay_us(1);
	LCD_Command_Port &= ~(1<<EN);
 686:	97 98       	cbi	0x12, 7	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 688:	8f ec       	ldi	r24, 0xCF	; 207
 68a:	97 e0       	ldi	r25, 0x07	; 7
 68c:	01 97       	sbiw	r24, 0x01	; 1
 68e:	f1 f7       	brne	.-4      	; 0x68c <LCD_Char+0x16>
 690:	00 c0       	rjmp	.+0      	; 0x692 <LCD_Char+0x1c>
 692:	00 00       	nop
	_delay_ms(1);
}
 694:	08 95       	ret

00000696 <LCD_Init>:
void LCD_Init (void)			/* LCD Initialize function */
{
	LCD_Command_Dir = 0xFF;		/* Make LCD command port direction as o/p */
 696:	8f ef       	ldi	r24, 0xFF	; 255
 698:	81 bb       	out	0x11, r24	; 17
	LCD_Data_Dir = 0xFF;		/* Make LCD data port direction as o/p */
 69a:	84 bb       	out	0x14, r24	; 20
 69c:	8f e3       	ldi	r24, 0x3F	; 63
 69e:	9c e9       	ldi	r25, 0x9C	; 156
 6a0:	01 97       	sbiw	r24, 0x01	; 1
 6a2:	f1 f7       	brne	.-4      	; 0x6a0 <LCD_Init+0xa>
 6a4:	00 c0       	rjmp	.+0      	; 0x6a6 <LCD_Init+0x10>
 6a6:	00 00       	nop
	_delay_ms(20);			/* LCD Power ON delay always >15ms */
	
	LCD_Command (0x38);		/* Initialization of 16X2 LCD in 8bit mode */
 6a8:	88 e3       	ldi	r24, 0x38	; 56
 6aa:	0e 94 2b 03 	call	0x656	; 0x656 <LCD_Command>
	LCD_Command (0x0C);		/* Display ON Cursor OFF */
 6ae:	8c e0       	ldi	r24, 0x0C	; 12
 6b0:	0e 94 2b 03 	call	0x656	; 0x656 <LCD_Command>
	LCD_Command (0x06);		/* Auto Increment cursor */
 6b4:	86 e0       	ldi	r24, 0x06	; 6
 6b6:	0e 94 2b 03 	call	0x656	; 0x656 <LCD_Command>
	LCD_Command (0x01);		/* Clear display */
 6ba:	81 e0       	ldi	r24, 0x01	; 1
 6bc:	0e 94 2b 03 	call	0x656	; 0x656 <LCD_Command>
	LCD_Command (0x80);		/* Cursor at home position */
 6c0:	80 e8       	ldi	r24, 0x80	; 128
 6c2:	0e 94 2b 03 	call	0x656	; 0x656 <LCD_Command>
}
 6c6:	08 95       	ret

000006c8 <LCD_String>:
void LCD_String (char *str)		/* Send string to LCD function */
{
 6c8:	cf 93       	push	r28
 6ca:	df 93       	push	r29
 6cc:	ec 01       	movw	r28, r24
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 6ce:	88 81       	ld	r24, Y
 6d0:	88 23       	and	r24, r24
 6d2:	31 f0       	breq	.+12     	; 0x6e0 <LCD_String+0x18>
	LCD_Command (0x0C);		/* Display ON Cursor OFF */
	LCD_Command (0x06);		/* Auto Increment cursor */
	LCD_Command (0x01);		/* Clear display */
	LCD_Command (0x80);		/* Cursor at home position */
}
void LCD_String (char *str)		/* Send string to LCD function */
 6d4:	21 96       	adiw	r28, 0x01	; 1
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
	{
		LCD_Char (str[i]);
 6d6:	0e 94 3b 03 	call	0x676	; 0x676 <LCD_Char>
	LCD_Command (0x80);		/* Cursor at home position */
}
void LCD_String (char *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 6da:	89 91       	ld	r24, Y+
 6dc:	88 23       	and	r24, r24
 6de:	d9 f7       	brne	.-10     	; 0x6d6 <LCD_String+0xe>
	{
		LCD_Char (str[i]);
	}
}
 6e0:	df 91       	pop	r29
 6e2:	cf 91       	pop	r28
 6e4:	08 95       	ret

000006e6 <LCD_String_xy>:
void LCD_String_xy (char row, char pos, char *str)/* Send string to LCD with xy position */
{
 6e6:	cf 93       	push	r28
 6e8:	df 93       	push	r29
 6ea:	ea 01       	movw	r28, r20
	if (row == 0 && pos<16)
 6ec:	88 23       	and	r24, r24
 6ee:	41 f4       	brne	.+16     	; 0x700 <LCD_String_xy+0x1a>
 6f0:	60 31       	cpi	r22, 0x10	; 16
 6f2:	78 f4       	brcc	.+30     	; 0x712 <LCD_String_xy+0x2c>
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
 6f4:	86 2f       	mov	r24, r22
 6f6:	8f 70       	andi	r24, 0x0F	; 15
 6f8:	80 68       	ori	r24, 0x80	; 128
 6fa:	0e 94 2b 03 	call	0x656	; 0x656 <LCD_Command>
 6fe:	09 c0       	rjmp	.+18     	; 0x712 <LCD_String_xy+0x2c>
	else if (row == 1 && pos<16)
 700:	81 30       	cpi	r24, 0x01	; 1
 702:	39 f4       	brne	.+14     	; 0x712 <LCD_String_xy+0x2c>
 704:	60 31       	cpi	r22, 0x10	; 16
 706:	28 f4       	brcc	.+10     	; 0x712 <LCD_String_xy+0x2c>
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
 708:	86 2f       	mov	r24, r22
 70a:	8f 70       	andi	r24, 0x0F	; 15
 70c:	80 6c       	ori	r24, 0xC0	; 192
 70e:	0e 94 2b 03 	call	0x656	; 0x656 <LCD_Command>
	LCD_String(str);		/* Call LCD string function */
 712:	ce 01       	movw	r24, r28
 714:	0e 94 64 03 	call	0x6c8	; 0x6c8 <LCD_String>
}
 718:	df 91       	pop	r29
 71a:	cf 91       	pop	r28
 71c:	08 95       	ret

0000071e <LCD_Clear>:
void LCD_Clear()
{
	LCD_Command (0x01);		/* clear display */
 71e:	81 e0       	ldi	r24, 0x01	; 1
 720:	0e 94 2b 03 	call	0x656	; 0x656 <LCD_Command>
	LCD_Command (0x80);		/* cursor at home position */
 724:	80 e8       	ldi	r24, 0x80	; 128
 726:	0e 94 2b 03 	call	0x656	; 0x656 <LCD_Command>
}
 72a:	08 95       	ret

0000072c <LCD_shift>:
void LCD_shift(){
 72c:	cf 92       	push	r12
 72e:	df 92       	push	r13
 730:	ef 92       	push	r14
 732:	ff 92       	push	r15
 734:	0f 93       	push	r16
 736:	1f 93       	push	r17
 738:	df 93       	push	r29
 73a:	cf 93       	push	r28
 73c:	cd b7       	in	r28, 0x3d	; 61
 73e:	de b7       	in	r29, 0x3e	; 62
 740:	c9 54       	subi	r28, 0x49	; 73
 742:	d0 40       	sbci	r29, 0x00	; 0
 744:	0f b6       	in	r0, 0x3f	; 63
 746:	f8 94       	cli
 748:	de bf       	out	0x3e, r29	; 62
 74a:	0f be       	out	0x3f, r0	; 63
 74c:	cd bf       	out	0x3d, r28	; 61
	int shift,i;
	char first_line[] = "Le Duy Nhat, 20163037, DTVT07-K61";
 74e:	de 01       	movw	r26, r28
 750:	11 96       	adiw	r26, 0x01	; 1
 752:	e0 e8       	ldi	r30, 0x80	; 128
 754:	f0 e0       	ldi	r31, 0x00	; 0
 756:	82 e2       	ldi	r24, 0x22	; 34
 758:	01 90       	ld	r0, Z+
 75a:	0d 92       	st	X+, r0
 75c:	81 50       	subi	r24, 0x01	; 1
 75e:	e1 f7       	brne	.-8      	; 0x758 <LCD_shift+0x2c>
	char second_line[] = "Vien Dien tu-Vien Thong, Truong DHBKHN";
 760:	de 01       	movw	r26, r28
 762:	93 96       	adiw	r26, 0x23	; 35
 764:	e2 ee       	ldi	r30, 0xE2	; 226
 766:	f0 e0       	ldi	r31, 0x00	; 0
 768:	87 e2       	ldi	r24, 0x27	; 39
 76a:	01 90       	ld	r0, Z+
 76c:	0d 92       	st	X+, r0
 76e:	81 50       	subi	r24, 0x01	; 1
 770:	e1 f7       	brne	.-8      	; 0x76a <LCD_shift+0x3e>
	LCD_Init();		/* Initialize LCD*/
 772:	0e 94 4b 03 	call	0x696	; 0x696 <LCD_Init>
	LCD_String(first_line);/* Write string on 1st line of LCD*/
 776:	ce 01       	movw	r24, r28
 778:	01 96       	adiw	r24, 0x01	; 1
 77a:	0e 94 64 03 	call	0x6c8	; 0x6c8 <LCD_String>
    LCD_String_xy(1,0, second_line);
 77e:	81 e0       	ldi	r24, 0x01	; 1
 780:	60 e0       	ldi	r22, 0x00	; 0
 782:	ae 01       	movw	r20, r28
 784:	4d 5d       	subi	r20, 0xDD	; 221
 786:	5f 4f       	sbci	r21, 0xFF	; 255
 788:	0e 94 73 03 	call	0x6e6	; 0x6e6 <LCD_String_xy>
 78c:	8f ef       	ldi	r24, 0xFF	; 255
 78e:	99 e6       	ldi	r25, 0x69	; 105
 790:	a8 e1       	ldi	r26, 0x18	; 24
 792:	81 50       	subi	r24, 0x01	; 1
 794:	90 40       	sbci	r25, 0x00	; 0
 796:	a0 40       	sbci	r26, 0x00	; 0
 798:	e1 f7       	brne	.-8      	; 0x792 <LCD_shift+0x66>
 79a:	00 c0       	rjmp	.+0      	; 0x79c <LCD_shift+0x70>
 79c:	00 00       	nop
	shift = 30;	/* Number of time shifts count=30 */
	_delay_ms(1000);
	
	while(1)
	{
		for(i=0;i<shift;i++)
 79e:	00 e0       	ldi	r16, 0x00	; 0
 7a0:	10 e0       	ldi	r17, 0x00	; 0
 7a2:	0f 2e       	mov	r0, r31
 7a4:	fe e1       	ldi	r31, 0x1E	; 30
 7a6:	ef 2e       	mov	r14, r31
 7a8:	ff 24       	eor	r15, r15
 7aa:	f0 2d       	mov	r31, r0
 7ac:	cc 24       	eor	r12, r12
 7ae:	dd 24       	eor	r13, r13
 7b0:	0e c0       	rjmp	.+28     	; 0x7ce <LCD_shift+0xa2>
		{
			LCD_Command(0x1c);/* shift entire display right */
 7b2:	8c e1       	ldi	r24, 0x1C	; 28
 7b4:	0e 94 2b 03 	call	0x656	; 0x656 <LCD_Command>
 7b8:	8f ef       	ldi	r24, 0xFF	; 255
 7ba:	99 e6       	ldi	r25, 0x69	; 105
 7bc:	a8 e1       	ldi	r26, 0x18	; 24
 7be:	81 50       	subi	r24, 0x01	; 1
 7c0:	90 40       	sbci	r25, 0x00	; 0
 7c2:	a0 40       	sbci	r26, 0x00	; 0
 7c4:	e1 f7       	brne	.-8      	; 0x7be <LCD_shift+0x92>
 7c6:	00 c0       	rjmp	.+0      	; 0x7c8 <LCD_shift+0x9c>
 7c8:	00 00       	nop
	shift = 30;	/* Number of time shifts count=30 */
	_delay_ms(1000);
	
	while(1)
	{
		for(i=0;i<shift;i++)
 7ca:	0f 5f       	subi	r16, 0xFF	; 255
 7cc:	1f 4f       	sbci	r17, 0xFF	; 255
 7ce:	0e 31       	cpi	r16, 0x1E	; 30
 7d0:	11 05       	cpc	r17, r1
 7d2:	7c f3       	brlt	.-34     	; 0x7b2 <LCD_shift+0x86>
 7d4:	87 01       	movw	r16, r14
		}			
		shift=30;/* number of time shifts 30 */
			
		for(i=0;i<30;i++)
		{
			LCD_Command(0x18);/* shift entire display left */
 7d6:	88 e1       	ldi	r24, 0x18	; 24
 7d8:	0e 94 2b 03 	call	0x656	; 0x656 <LCD_Command>
 7dc:	8f ef       	ldi	r24, 0xFF	; 255
 7de:	99 e6       	ldi	r25, 0x69	; 105
 7e0:	a8 e1       	ldi	r26, 0x18	; 24
 7e2:	81 50       	subi	r24, 0x01	; 1
 7e4:	90 40       	sbci	r25, 0x00	; 0
 7e6:	a0 40       	sbci	r26, 0x00	; 0
 7e8:	e1 f7       	brne	.-8      	; 0x7e2 <LCD_shift+0xb6>
 7ea:	00 c0       	rjmp	.+0      	; 0x7ec <LCD_shift+0xc0>
 7ec:	00 00       	nop
 7ee:	01 50       	subi	r16, 0x01	; 1
 7f0:	10 40       	sbci	r17, 0x00	; 0
			LCD_Command(0x1c);/* shift entire display right */
			_delay_ms(1000);
		}			
		shift=30;/* number of time shifts 30 */
			
		for(i=0;i<30;i++)
 7f2:	89 f7       	brne	.-30     	; 0x7d6 <LCD_shift+0xaa>
	shift = 30;	/* Number of time shifts count=30 */
	_delay_ms(1000);
	
	while(1)
	{
		for(i=0;i<shift;i++)
 7f4:	86 01       	movw	r16, r12
 7f6:	eb cf       	rjmp	.-42     	; 0x7ce <LCD_shift+0xa2>

000007f8 <ADC_Init>:
}


void ADC_Init()
{
	DDRA=0x0;			/* Make ADC port as input */
 7f8:	1a ba       	out	0x1a, r1	; 26
	ADCSRA = 0x87;			/* Enable ADC, fr/128  */
 7fa:	87 e8       	ldi	r24, 0x87	; 135
 7fc:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0x40;			/* Vref: Avcc, ADC channel: 0 */
 7fe:	80 e4       	ldi	r24, 0x40	; 64
 800:	87 b9       	out	0x07, r24	; 7
	
}
 802:	08 95       	ret

00000804 <ADC_Read>:

int ADC_Read(char channel)
{
	int Ain,AinLow;
	
	ADMUX=ADMUX|(channel & 0x0f);	/* Set input channel to read */
 804:	97 b1       	in	r25, 0x07	; 7
 806:	8f 70       	andi	r24, 0x0F	; 15
 808:	98 2b       	or	r25, r24
 80a:	97 b9       	out	0x07, r25	; 7

	ADCSRA |= (1<<ADSC);		/* Start conversion */
 80c:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA&(1<<ADIF))==0);	/* Monitor end of conversion interrupt */
 80e:	34 9b       	sbis	0x06, 4	; 6
 810:	fe cf       	rjmp	.-4      	; 0x80e <ADC_Read+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 812:	8a e1       	ldi	r24, 0x1A	; 26
 814:	8a 95       	dec	r24
 816:	f1 f7       	brne	.-4      	; 0x814 <ADC_Read+0x10>
 818:	00 c0       	rjmp	.+0      	; 0x81a <ADC_Read+0x16>
	
	_delay_us(10);
	AinLow = (int)ADCL;		/* Read lower byte*/
 81a:	84 b1       	in	r24, 0x04	; 4
	Ain = (int)ADCH*256;		/* Read higher 2 bits and 
 81c:	95 b1       	in	r25, 0x05	; 5
 81e:	39 2f       	mov	r19, r25
 820:	20 e0       	ldi	r18, 0x00	; 0
					Multiply with weight */
	Ain = Ain + AinLow;				
 822:	28 0f       	add	r18, r24
 824:	31 1d       	adc	r19, r1
	return(Ain);			/* Return digital value*/
}
 826:	82 2f       	mov	r24, r18
 828:	93 2f       	mov	r25, r19
 82a:	08 95       	ret

0000082c <ADC_2_LCD_new>:

 
void ADC_2_LCD_new(){
 82c:	0f 93       	push	r16
 82e:	1f 93       	push	r17
 830:	df 93       	push	r29
 832:	cf 93       	push	r28
 834:	00 d0       	rcall	.+0      	; 0x836 <ADC_2_LCD_new+0xa>
 836:	00 d0       	rcall	.+0      	; 0x838 <ADC_2_LCD_new+0xc>
 838:	0f 92       	push	r0
 83a:	cd b7       	in	r28, 0x3d	; 61
 83c:	de b7       	in	r29, 0x3e	; 62
	char String[5];
	int value;

	ADC_Init();
 83e:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <ADC_Init>
	LCD_Init();			/* Initialization of LCD */
 842:	0e 94 4b 03 	call	0x696	; 0x696 <LCD_Init>
	LCD_String("Test ADC & LCD");	/* Write string on 1st line of LCD */
 846:	89 e0       	ldi	r24, 0x09	; 9
 848:	91 e0       	ldi	r25, 0x01	; 1
 84a:	0e 94 64 03 	call	0x6c8	; 0x6c8 <LCD_String>
	LCD_String_xy(1, 0, "ADC0:     /1023" );
 84e:	81 e0       	ldi	r24, 0x01	; 1
 850:	60 e0       	ldi	r22, 0x00	; 0
 852:	48 e1       	ldi	r20, 0x18	; 24
 854:	51 e0       	ldi	r21, 0x01	; 1
 856:	0e 94 73 03 	call	0x6e6	; 0x6e6 <LCD_String_xy>
	while(1)
	{
		LCD_Command(0xc4);	/* LCD16x2 cursor position */
		value=ADC_Read(0);	/* Read ADC channel 0 */
		itoa(value,String,10);	/* Integer to string conversion */ 
 85a:	8e 01       	movw	r16, r28
 85c:	0f 5f       	subi	r16, 0xFF	; 255
 85e:	1f 4f       	sbci	r17, 0xFF	; 255
	LCD_Init();			/* Initialization of LCD */
	LCD_String("Test ADC & LCD");	/* Write string on 1st line of LCD */
	LCD_String_xy(1, 0, "ADC0:     /1023" );
	while(1)
	{
		LCD_Command(0xc4);	/* LCD16x2 cursor position */
 860:	84 ec       	ldi	r24, 0xC4	; 196
 862:	0e 94 2b 03 	call	0x656	; 0x656 <LCD_Command>
		value=ADC_Read(0);	/* Read ADC channel 0 */
 866:	80 e0       	ldi	r24, 0x00	; 0
 868:	0e 94 02 04 	call	0x804	; 0x804 <ADC_Read>
		itoa(value,String,10);	/* Integer to string conversion */ 
 86c:	b8 01       	movw	r22, r16
 86e:	4a e0       	ldi	r20, 0x0A	; 10
 870:	50 e0       	ldi	r21, 0x00	; 0
 872:	0e 94 19 05 	call	0xa32	; 0xa32 <itoa>
		LCD_String_xy(1, 6, String);						
 876:	81 e0       	ldi	r24, 0x01	; 1
 878:	66 e0       	ldi	r22, 0x06	; 6
 87a:	a8 01       	movw	r20, r16
 87c:	0e 94 73 03 	call	0x6e6	; 0x6e6 <LCD_String_xy>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 880:	8f ef       	ldi	r24, 0xFF	; 255
 882:	94 e3       	ldi	r25, 0x34	; 52
 884:	ac e0       	ldi	r26, 0x0C	; 12
 886:	81 50       	subi	r24, 0x01	; 1
 888:	90 40       	sbci	r25, 0x00	; 0
 88a:	a0 40       	sbci	r26, 0x00	; 0
 88c:	e1 f7       	brne	.-8      	; 0x886 <ADC_2_LCD_new+0x5a>
 88e:	00 c0       	rjmp	.+0      	; 0x890 <ADC_2_LCD_new+0x64>
 890:	00 00       	nop
 892:	e6 cf       	rjmp	.-52     	; 0x860 <ADC_2_LCD_new+0x34>

00000894 <UART_init>:
}


void UART_init(long USART_BAUDRATE)
{
	UCSRB |= (1 << RXEN) | (1 << TXEN);/* Turn on transmission and reception */
 894:	2a b1       	in	r18, 0x0a	; 10
 896:	28 61       	ori	r18, 0x18	; 24
 898:	2a b9       	out	0x0a, r18	; 10
	UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);/* Use 8-bit character sizes */
 89a:	20 b5       	in	r18, 0x20	; 32
 89c:	26 68       	ori	r18, 0x86	; 134
 89e:	20 bd       	out	0x20, r18	; 32
	UBRRL = BAUD_PRESCALE;		/* Load lower 8-bits of the baud rate value */
 8a0:	9b 01       	movw	r18, r22
 8a2:	ac 01       	movw	r20, r24
 8a4:	22 0f       	add	r18, r18
 8a6:	33 1f       	adc	r19, r19
 8a8:	44 1f       	adc	r20, r20
 8aa:	55 1f       	adc	r21, r21
 8ac:	22 0f       	add	r18, r18
 8ae:	33 1f       	adc	r19, r19
 8b0:	44 1f       	adc	r20, r20
 8b2:	55 1f       	adc	r21, r21
 8b4:	22 0f       	add	r18, r18
 8b6:	33 1f       	adc	r19, r19
 8b8:	44 1f       	adc	r20, r20
 8ba:	55 1f       	adc	r21, r21
 8bc:	22 0f       	add	r18, r18
 8be:	33 1f       	adc	r19, r19
 8c0:	44 1f       	adc	r20, r20
 8c2:	55 1f       	adc	r21, r21
 8c4:	60 e0       	ldi	r22, 0x00	; 0
 8c6:	72 e1       	ldi	r23, 0x12	; 18
 8c8:	8a e7       	ldi	r24, 0x7A	; 122
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__udivmodsi4>
 8d0:	82 2f       	mov	r24, r18
 8d2:	81 50       	subi	r24, 0x01	; 1
 8d4:	89 b9       	out	0x09, r24	; 9
	UBRRH = (BAUD_PRESCALE >> 8);	/* Load upper 8-bits*/
 8d6:	21 50       	subi	r18, 0x01	; 1
 8d8:	30 40       	sbci	r19, 0x00	; 0
 8da:	40 40       	sbci	r20, 0x00	; 0
 8dc:	50 40       	sbci	r21, 0x00	; 0
 8de:	23 2f       	mov	r18, r19
 8e0:	34 2f       	mov	r19, r20
 8e2:	45 2f       	mov	r20, r21
 8e4:	55 27       	eor	r21, r21
 8e6:	20 bd       	out	0x20, r18	; 32
}
 8e8:	08 95       	ret

000008ea <UART_RxChar>:

unsigned char UART_RxChar()
{
	while ((UCSRA & (1 << RXC)) == 0);/* Wait till data is received */
 8ea:	5f 9b       	sbis	0x0b, 7	; 11
 8ec:	fe cf       	rjmp	.-4      	; 0x8ea <UART_RxChar>
	return(UDR);			/* Return the byte*/
 8ee:	8c b1       	in	r24, 0x0c	; 12
}
 8f0:	08 95       	ret

000008f2 <UART_TxChar>:

void UART_TxChar(char ch)
{
	while (! (UCSRA & (1<<UDRE)));	/* Wait for empty transmit buffer*/
 8f2:	5d 9b       	sbis	0x0b, 5	; 11
 8f4:	fe cf       	rjmp	.-4      	; 0x8f2 <UART_TxChar>
	UDR = ch ;
 8f6:	8c b9       	out	0x0c, r24	; 12
}
 8f8:	08 95       	ret

000008fa <UART_SendString>:

void UART_SendString(char *str)
{
 8fa:	1f 93       	push	r17
 8fc:	cf 93       	push	r28
 8fe:	df 93       	push	r29
 900:	ec 01       	movw	r28, r24
	unsigned char j=0;
	
	while (str[j]!=0)		/* Send string till null */
 902:	88 81       	ld	r24, Y
 904:	88 23       	and	r24, r24
 906:	51 f0       	breq	.+20     	; 0x91c <UART_SendString+0x22>
	UDR = ch ;
}

void UART_SendString(char *str)
{
	unsigned char j=0;
 908:	10 e0       	ldi	r17, 0x00	; 0
	
	while (str[j]!=0)		/* Send string till null */
	{
		UART_TxChar(str[j]);	
 90a:	0e 94 79 04 	call	0x8f2	; 0x8f2 <UART_TxChar>
		j++;
 90e:	1f 5f       	subi	r17, 0xFF	; 255

void UART_SendString(char *str)
{
	unsigned char j=0;
	
	while (str[j]!=0)		/* Send string till null */
 910:	fe 01       	movw	r30, r28
 912:	e1 0f       	add	r30, r17
 914:	f1 1d       	adc	r31, r1
 916:	80 81       	ld	r24, Z
 918:	88 23       	and	r24, r24
 91a:	b9 f7       	brne	.-18     	; 0x90a <UART_SendString+0x10>
	{
		UART_TxChar(str[j]);	
		j++;
	}
}
 91c:	df 91       	pop	r29
 91e:	cf 91       	pop	r28
 920:	1f 91       	pop	r17
 922:	08 95       	ret

00000924 <main>:
#include "thu_vien_rieng.h"

unsigned char push_button = 0;

int main(void)
{
 924:	cf 92       	push	r12
 926:	df 92       	push	r13
 928:	ef 92       	push	r14
 92a:	ff 92       	push	r15
 92c:	0f 93       	push	r16
 92e:	1f 93       	push	r17
 930:	df 93       	push	r29
 932:	cf 93       	push	r28
 934:	cd b7       	in	r28, 0x3d	; 61
 936:	de b7       	in	r29, 0x3e	; 62
 938:	c9 54       	subi	r28, 0x49	; 73
 93a:	d0 40       	sbci	r29, 0x00	; 0
 93c:	0f b6       	in	r0, 0x3f	; 63
 93e:	f8 94       	cli
 940:	de bf       	out	0x3e, r29	; 62
 942:	0f be       	out	0x3f, r0	; 63
 944:	cd bf       	out	0x3d, r28	; 61
	//ADC_2_LCD_new();
	
	/************************************************************************/
	/* Phan 3.5 Giao tiep v?i may tinh qua chuan UART-USB                   */
	/************************************************************************/
	char first_line[] = "Le Duy Nhat, 20163037, DTVT07-K61";
 946:	de 01       	movw	r26, r28
 948:	11 96       	adiw	r26, 0x01	; 1
 94a:	e0 e8       	ldi	r30, 0x80	; 128
 94c:	f0 e0       	ldi	r31, 0x00	; 0
 94e:	82 e2       	ldi	r24, 0x22	; 34
 950:	01 90       	ld	r0, Z+
 952:	0d 92       	st	X+, r0
 954:	81 50       	subi	r24, 0x01	; 1
 956:	e1 f7       	brne	.-8      	; 0x950 <main+0x2c>
	char second_line[] = "Vien Dien tu-Vien Thong, Truong DHBKHN";
 958:	de 01       	movw	r26, r28
 95a:	93 96       	adiw	r26, 0x23	; 35
 95c:	e2 ee       	ldi	r30, 0xE2	; 226
 95e:	f0 e0       	ldi	r31, 0x00	; 0
 960:	87 e2       	ldi	r24, 0x27	; 39
 962:	01 90       	ld	r0, Z+
 964:	0d 92       	st	X+, r0
 966:	81 50       	subi	r24, 0x01	; 1
 968:	e1 f7       	brne	.-8      	; 0x962 <main+0x3e>
	LCD_Init();		/* Initialize LCD*/
 96a:	0e 94 4b 03 	call	0x696	; 0x696 <LCD_Init>
	LCD_String(first_line);/* Write string on 1st line of LCD*/
 96e:	ce 01       	movw	r24, r28
 970:	01 96       	adiw	r24, 0x01	; 1
 972:	0e 94 64 03 	call	0x6c8	; 0x6c8 <LCD_String>
    LCD_String_xy(1,0, second_line);
 976:	81 e0       	ldi	r24, 0x01	; 1
 978:	60 e0       	ldi	r22, 0x00	; 0
 97a:	ae 01       	movw	r20, r28
 97c:	4d 5d       	subi	r20, 0xDD	; 221
 97e:	5f 4f       	sbci	r21, 0xFF	; 255
 980:	0e 94 73 03 	call	0x6e6	; 0x6e6 <LCD_String_xy>
 984:	8f ef       	ldi	r24, 0xFF	; 255
 986:	99 e6       	ldi	r25, 0x69	; 105
 988:	a8 e1       	ldi	r26, 0x18	; 24
 98a:	81 50       	subi	r24, 0x01	; 1
 98c:	90 40       	sbci	r25, 0x00	; 0
 98e:	a0 40       	sbci	r26, 0x00	; 0
 990:	e1 f7       	brne	.-8      	; 0x98a <main+0x66>
 992:	00 c0       	rjmp	.+0      	; 0x994 <main+0x70>
 994:	00 00       	nop
	_delay_ms(1000);
	
	UART_init(9600);
 996:	60 e8       	ldi	r22, 0x80	; 128
 998:	75 e2       	ldi	r23, 0x25	; 37
 99a:	80 e0       	ldi	r24, 0x00	; 0
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	0e 94 4a 04 	call	0x894	; 0x894 <UART_init>
	
	while(1)
	{
		UART_SendString(first_line);
 9a2:	8e 01       	movw	r16, r28
 9a4:	0f 5f       	subi	r16, 0xFF	; 255
 9a6:	1f 4f       	sbci	r17, 0xFF	; 255
		UART_SendString("\n"); //newline
 9a8:	0f 2e       	mov	r0, r31
 9aa:	f8 e2       	ldi	r31, 0x28	; 40
 9ac:	ef 2e       	mov	r14, r31
 9ae:	f1 e0       	ldi	r31, 0x01	; 1
 9b0:	ff 2e       	mov	r15, r31
 9b2:	f0 2d       	mov	r31, r0
		UART_SendString(second_line);
 9b4:	0f 2e       	mov	r0, r31
 9b6:	f3 e2       	ldi	r31, 0x23	; 35
 9b8:	cf 2e       	mov	r12, r31
 9ba:	dd 24       	eor	r13, r13
 9bc:	f0 2d       	mov	r31, r0
 9be:	cc 0e       	add	r12, r28
 9c0:	dd 1e       	adc	r13, r29
	
	UART_init(9600);
	
	while(1)
	{
		UART_SendString(first_line);
 9c2:	c8 01       	movw	r24, r16
 9c4:	0e 94 7d 04 	call	0x8fa	; 0x8fa <UART_SendString>
		UART_SendString("\n"); //newline
 9c8:	c7 01       	movw	r24, r14
 9ca:	0e 94 7d 04 	call	0x8fa	; 0x8fa <UART_SendString>
		UART_SendString(second_line);
 9ce:	c6 01       	movw	r24, r12
 9d0:	0e 94 7d 04 	call	0x8fa	; 0x8fa <UART_SendString>
		LCD_Command(0x1C);/* shift entire display left */
 9d4:	8c e1       	ldi	r24, 0x1C	; 28
 9d6:	0e 94 2b 03 	call	0x656	; 0x656 <LCD_Command>
 9da:	8f ef       	ldi	r24, 0xFF	; 255
 9dc:	99 e6       	ldi	r25, 0x69	; 105
 9de:	a8 e1       	ldi	r26, 0x18	; 24
 9e0:	81 50       	subi	r24, 0x01	; 1
 9e2:	90 40       	sbci	r25, 0x00	; 0
 9e4:	a0 40       	sbci	r26, 0x00	; 0
 9e6:	e1 f7       	brne	.-8      	; 0x9e0 <main+0xbc>
 9e8:	00 c0       	rjmp	.+0      	; 0x9ea <main+0xc6>
 9ea:	00 00       	nop
 9ec:	ea cf       	rjmp	.-44     	; 0x9c2 <main+0x9e>

000009ee <__udivmodsi4>:
 9ee:	a1 e2       	ldi	r26, 0x21	; 33
 9f0:	1a 2e       	mov	r1, r26
 9f2:	aa 1b       	sub	r26, r26
 9f4:	bb 1b       	sub	r27, r27
 9f6:	fd 01       	movw	r30, r26
 9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__udivmodsi4_ep>

000009fa <__udivmodsi4_loop>:
 9fa:	aa 1f       	adc	r26, r26
 9fc:	bb 1f       	adc	r27, r27
 9fe:	ee 1f       	adc	r30, r30
 a00:	ff 1f       	adc	r31, r31
 a02:	a2 17       	cp	r26, r18
 a04:	b3 07       	cpc	r27, r19
 a06:	e4 07       	cpc	r30, r20
 a08:	f5 07       	cpc	r31, r21
 a0a:	20 f0       	brcs	.+8      	; 0xa14 <__udivmodsi4_ep>
 a0c:	a2 1b       	sub	r26, r18
 a0e:	b3 0b       	sbc	r27, r19
 a10:	e4 0b       	sbc	r30, r20
 a12:	f5 0b       	sbc	r31, r21

00000a14 <__udivmodsi4_ep>:
 a14:	66 1f       	adc	r22, r22
 a16:	77 1f       	adc	r23, r23
 a18:	88 1f       	adc	r24, r24
 a1a:	99 1f       	adc	r25, r25
 a1c:	1a 94       	dec	r1
 a1e:	69 f7       	brne	.-38     	; 0x9fa <__udivmodsi4_loop>
 a20:	60 95       	com	r22
 a22:	70 95       	com	r23
 a24:	80 95       	com	r24
 a26:	90 95       	com	r25
 a28:	9b 01       	movw	r18, r22
 a2a:	ac 01       	movw	r20, r24
 a2c:	bd 01       	movw	r22, r26
 a2e:	cf 01       	movw	r24, r30
 a30:	08 95       	ret

00000a32 <itoa>:
 a32:	fb 01       	movw	r30, r22
 a34:	9f 01       	movw	r18, r30
 a36:	e8 94       	clt
 a38:	42 30       	cpi	r20, 0x02	; 2
 a3a:	c4 f0       	brlt	.+48     	; 0xa6c <itoa+0x3a>
 a3c:	45 32       	cpi	r20, 0x25	; 37
 a3e:	b4 f4       	brge	.+44     	; 0xa6c <itoa+0x3a>
 a40:	4a 30       	cpi	r20, 0x0A	; 10
 a42:	29 f4       	brne	.+10     	; 0xa4e <itoa+0x1c>
 a44:	97 fb       	bst	r25, 7
 a46:	1e f4       	brtc	.+6      	; 0xa4e <itoa+0x1c>
 a48:	90 95       	com	r25
 a4a:	81 95       	neg	r24
 a4c:	9f 4f       	sbci	r25, 0xFF	; 255
 a4e:	64 2f       	mov	r22, r20
 a50:	77 27       	eor	r23, r23
 a52:	0e 94 4a 05 	call	0xa94	; 0xa94 <__udivmodhi4>
 a56:	80 5d       	subi	r24, 0xD0	; 208
 a58:	8a 33       	cpi	r24, 0x3A	; 58
 a5a:	0c f0       	brlt	.+2      	; 0xa5e <itoa+0x2c>
 a5c:	89 5d       	subi	r24, 0xD9	; 217
 a5e:	81 93       	st	Z+, r24
 a60:	cb 01       	movw	r24, r22
 a62:	00 97       	sbiw	r24, 0x00	; 0
 a64:	a1 f7       	brne	.-24     	; 0xa4e <itoa+0x1c>
 a66:	16 f4       	brtc	.+4      	; 0xa6c <itoa+0x3a>
 a68:	5d e2       	ldi	r21, 0x2D	; 45
 a6a:	51 93       	st	Z+, r21
 a6c:	10 82       	st	Z, r1
 a6e:	c9 01       	movw	r24, r18
 a70:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <strrev>

00000a74 <strrev>:
 a74:	dc 01       	movw	r26, r24
 a76:	fc 01       	movw	r30, r24
 a78:	67 2f       	mov	r22, r23
 a7a:	71 91       	ld	r23, Z+
 a7c:	77 23       	and	r23, r23
 a7e:	e1 f7       	brne	.-8      	; 0xa78 <strrev+0x4>
 a80:	32 97       	sbiw	r30, 0x02	; 2
 a82:	04 c0       	rjmp	.+8      	; 0xa8c <strrev+0x18>
 a84:	7c 91       	ld	r23, X
 a86:	6d 93       	st	X+, r22
 a88:	70 83       	st	Z, r23
 a8a:	62 91       	ld	r22, -Z
 a8c:	ae 17       	cp	r26, r30
 a8e:	bf 07       	cpc	r27, r31
 a90:	c8 f3       	brcs	.-14     	; 0xa84 <strrev+0x10>
 a92:	08 95       	ret

00000a94 <__udivmodhi4>:
 a94:	aa 1b       	sub	r26, r26
 a96:	bb 1b       	sub	r27, r27
 a98:	51 e1       	ldi	r21, 0x11	; 17
 a9a:	07 c0       	rjmp	.+14     	; 0xaaa <__udivmodhi4_ep>

00000a9c <__udivmodhi4_loop>:
 a9c:	aa 1f       	adc	r26, r26
 a9e:	bb 1f       	adc	r27, r27
 aa0:	a6 17       	cp	r26, r22
 aa2:	b7 07       	cpc	r27, r23
 aa4:	10 f0       	brcs	.+4      	; 0xaaa <__udivmodhi4_ep>
 aa6:	a6 1b       	sub	r26, r22
 aa8:	b7 0b       	sbc	r27, r23

00000aaa <__udivmodhi4_ep>:
 aaa:	88 1f       	adc	r24, r24
 aac:	99 1f       	adc	r25, r25
 aae:	5a 95       	dec	r21
 ab0:	a9 f7       	brne	.-22     	; 0xa9c <__udivmodhi4_loop>
 ab2:	80 95       	com	r24
 ab4:	90 95       	com	r25
 ab6:	bc 01       	movw	r22, r24
 ab8:	cd 01       	movw	r24, r26
 aba:	08 95       	ret

00000abc <_exit>:
 abc:	f8 94       	cli

00000abe <__stop_program>:
 abe:	ff cf       	rjmp	.-2      	; 0xabe <__stop_program>
